<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.1.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2017-11-11T15:46:47</timestamp>
        <product version="4.2.5000.27554" user="a a" serial="12345-GOLD-12345678--1234567-8-123456-78-12345">Dotfuscator Professional Edition (No Time Limit)</product>
    </header>
    <mapping>
        <module>
            <name>UTNT.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;</name>
                <methodlist>
                    <method>
                        <signature>unsigned int32(string)</signature>
                        <name>ComputeStringHash</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;/__StaticArrayInitTypeSize=14</signature>
                        <name>49BE292FEFD2E3B7218C9123B9A016847C2A5C96</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>6532575F81314AADD4BCFD96F1517D5BBFF2B60B</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;/__StaticArrayInitTypeSize=14</name>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.ArrayParameterCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;UTNT.HttpServer.IParameter&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameter(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ArrayParameterCollection(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.IParameter&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ArrayParameterCollection(string)</signature>
                        <name>GetItem</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UTNT.HttpServer.IParameterCollection.get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.IParameter&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.AuthenticationProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Authentication.IAuthenticator)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.IAuthenticationUser(UTNT.HttpServer.IRequest)</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse, string)</signature>
                        <name>CreateChallenge</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Authentication.IAuthenticator&gt;</signature>
                        <name>_authenticators</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.BasicAuthentication</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Authentication.IUserProvider)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.IAuthenticationUser(UTNT.HttpServer.Headers.AuthorizationHeader, string, string)</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>CreateChallenge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Scheme</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Authentication.IUserProvider</signature>
                        <name>_userProvider</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.DigestAuthentication</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Authentication.IUserProvider)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.IAuthenticationUser(UTNT.HttpServer.Headers.AuthorizationHeader, string, string)</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>CreateChallenge</name>
                    </method>
                    <method>
                        <signature>string(string, string, string, string, string, string)</signature>
                        <name>Encrypt</name>
                    </method>
                    <method>
                        <signature>string(string, string, string, string, string, string, string, string, string)</signature>
                        <name>Encrypt</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Scheme</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetCurrentNonce</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>GetHA1</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetMD5HashBinHex2</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsValidNonce</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>ManageNonces</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.DateTime&gt;</signature>
                        <name>_nonces</name>
                    </field>
                    <field>
                        <signature>System.Threading.Timer</signature>
                        <name>_timer</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Authentication.IUserProvider</signature>
                        <name>_userProvider</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>DisableNonceCheck</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.IAuthenticationProvider</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, string)</signature>
                        <name>RequestAuthentication</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.IAuthenticationUser</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_HA1</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Username</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HA1</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Username</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.IAuthenticator</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.IAuthenticationUser(UTNT.HttpServer.Headers.AuthorizationHeader, string, string)</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>CreateChallenge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Scheme</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Authentication.IUserProvider</name>
                <methodlist>
                    <method>
                        <signature>System.Security.Principal.IPrincipal(UTNT.HttpServer.Authentication.IAuthenticationUser)</signature>
                        <name>GetPrincipal</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.IAuthenticationUser(string, string)</signature>
                        <name>Lookup</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.AuthenticationRequiredException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.BadRequestException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.BodyDecoderCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.BodyDecoders.IBodyDecoder)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.BodyDecoders.DecodedData(System.IO.Stream, UTNT.HttpServer.Headers.ContentTypeHeader, System.Text.Encoding)</signature>
                        <name>Decode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.BodyDecoders.IBodyDecoder&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.BodyDecoders.IBodyDecoder&gt;</signature>
                        <name>_decoders</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.DecodedData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpFileCollection()</signature>
                        <name>get_Files</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ParameterCollection()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.HttpFileCollection)</signature>
                        <name>set_Files</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.ParameterCollection)</signature>
                        <name>set_Parameters</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.HttpFileCollection</signature>
                        <name>&lt;Files&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.ParameterCollection</signature>
                        <name>&lt;Parameters&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.IBodyDecoder</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.BodyDecoders.DecodedData(System.IO.Stream, UTNT.HttpServer.Headers.ContentTypeHeader, System.Text.Encoding)</signature>
                        <name>Decode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_ContentTypes</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.Mono.HttpMultipart</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.Stream, string, System.Text.Encoding)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], unsigned int8[])</signature>
                        <name>CompareBytes</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>GetContentDispositionAttribute</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>GetContentDispositionAttributeWithEncoding</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>MoveToNextBoundary</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadBoundary</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadHeaders</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadLine</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.BodyDecoders.Mono.HttpMultipart/Element()</signature>
                        <name>ReadNextElement</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>StripPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_atEof</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>boundary</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>boundary_bytes</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>buffer</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>CR</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>encoding</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>LF</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>sb</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.Mono.HttpMultipart/Element</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ContentType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Filename</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>Length</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Name</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>Start</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.Mono.StrUtils</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>EndsWith</name>
                    </method>
                    <method>
                        <signature>bool(string, string, bool)</signature>
                        <name>EndsWith</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>EscapeQuotesAndBackslashes</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>string[](string, char[])</signature>
                        <name>SplitRemoveEmptyEntries</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>StartsWith</name>
                    </method>
                    <method>
                        <signature>bool(string, string, bool)</signature>
                        <name>StartsWith</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.MultiPartDecoder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.BodyDecoders.DecodedData(System.IO.Stream, UTNT.HttpServer.Headers.ContentTypeHeader, System.Text.Encoding)</signature>
                        <name>Decode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_ContentTypes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>FormData</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MimeType</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.BodyDecoders.UrlDecoder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.BodyDecoders.DecodedData(System.IO.Stream, UTNT.HttpServer.Headers.ContentTypeHeader, System.Text.Encoding)</signature>
                        <name>Decode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_ContentTypes</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.ComponentAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.ContentTypeHelper</name>
                <methodlist>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.ErrorPageEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_Exception</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsHandled</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>set_Exception</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsHandled</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IHttpContext</signature>
                        <name>&lt;Context&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>&lt;Exception&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsHandled&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.ExceptionEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_Exception</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>set_Exception</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Exception</signature>
                        <name>&lt;Exception&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.FactoryMethod</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.Type, object[], System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.ForbiddenException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.AuthorizationHeader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Scheme</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Scheme</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Scheme&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.CacheControlHeader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.ConnectionHeader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ConnectionType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ConnectionType, UTNT.HttpServer.Headers.HeaderParameterCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ConnectionType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.HeaderParameterCollection)</signature>
                        <name>set_Parameters</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ConnectionType)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection</signature>
                        <name>&lt;Parameters&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionType</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader</signature>
                        <name>Default10</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader</signature>
                        <name>Default11</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.ConnectionType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionType</signature>
                        <name>Close</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionType</signature>
                        <name>KeepAlive</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.ContentTypeHeader</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.HeaderParameterCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection</signature>
                        <name>_parameters</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.CookieHeader</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookieCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.RequestCookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookieCollection)</signature>
                        <name>set_Cookies</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Messages.RequestCookieCollection</signature>
                        <name>&lt;Cookies&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.DateHeader</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.DateTime)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.HeaderCollection</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.HeaderFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.Headers.IHeader&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Headers.IHeader&gt;</signature>
                        <name>_headers</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.HeaderFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.Parsers.IHeaderParser)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddDefaultParsers</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>CreateParser</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, string)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Headers.Parsers.IHeaderParser&gt;</signature>
                        <name>_parsers</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.ObjectPool`1&lt;UTNT.HttpServer.Tools.StringReader&gt;</signature>
                        <name>_readers</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.Parsers.IHeaderParser</signature>
                        <name>_stringParser</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.HeaderFactory/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.StringReader()</signature>
                        <name>&lt;.ctor&gt;b__7_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderFactory/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.CreateHandler`1&lt;UTNT.HttpServer.Tools.StringReader&gt;</signature>
                        <name>&lt;&gt;9__7_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.HeaderParameterCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection(UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.HeaderParameterCollection(UTNT.HttpServer.Tools.ITextReader, char)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.IHeader</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.IHeaderCollection</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.NumericHeader</name>
                <methodlist>
                    <method>
                        <signature>void(string, int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.AuthorizationParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.ConnectionParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.ContentTypeParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.CookieParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.DateParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.IHeaderParser</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.NumericHeaderParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.ParserForAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HeaderName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;HeaderName&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.Parsers.StringParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string, UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Headers.StringHeader</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HeaderValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Helpers.FilterHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, string, object&amp;, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>bool(object&amp;, System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>bool(object, string, object&amp;)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Helpers.PropertyAssigner</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.IParameterCollection)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Helpers.FilterHandler)</signature>
                        <name>SetFilterHandler</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Helpers.FilterHandler</signature>
                        <name>_handler</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Helpers.PropertyException</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,System.Exception&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Exception&gt;()</signature>
                        <name>get_PropertyErrors</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Exception&gt;</signature>
                        <name>_propertyErrors</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, UTNT.HttpServer.Messages.MessageFactoryContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;)</signature>
                        <name>add_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_CurrentRequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_CurrentRequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_Disconnected</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_RequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(System.Net.Sockets.Socket)</signature>
                        <name>CreateStream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Disconnect</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpContext()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpFactory()</signature>
                        <name>get_HttpFactory</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.MessageFactoryContext()</signature>
                        <name>get_MessageFactoryContext</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Socket</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.ContinueEventArgs)</signature>
                        <name>On100Continue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnConnectionTimeout</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>OnReceive</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.FactoryRequestEventArgs)</signature>
                        <name>OnRequest</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>ParseBuffer</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;)</signature>
                        <name>remove_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_CurrentRequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_CurrentRequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_Disconnected</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_RequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext)</signature>
                        <name>set_Current</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.HttpFactory)</signature>
                        <name>set_HttpFactory</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.MessageFactoryContext)</signature>
                        <name>set_MessageFactoryContext</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>set_Response</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Socket</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>set_Stream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IHttpContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>System.Threading.Timer</signature>
                        <name>_keepAlive</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_keepAliveTimeout</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.HttpFactory</signature>
                        <name>&lt;HttpFactory&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.MessageFactoryContext</signature>
                        <name>&lt;MessageFactoryContext&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IResponse</signature>
                        <name>&lt;Response&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;Socket&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>&lt;Stream&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.ObjectPool`1&lt;unsigned int8[]&gt;</signature>
                        <name>Buffers</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;</signature>
                        <name>ContinueResponseRequested</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>CurrentRequestCompleted</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>CurrentRequestReceived</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>Disconnected</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>RequestCompleted</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>RequestReceived</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpContext/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>&lt;.cctor&gt;b__68_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.cctor&gt;b__68_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.cctor&gt;b__68_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_1</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.ContinueEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_3</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.HttpContext/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>&lt;&gt;9__6_2</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_3</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpException</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.HttpStatusCode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.HttpStatusCode, string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Net.HttpStatusCode()</signature>
                        <name>get_Code</name>
                    </method>
                    <method>
                        <signature>void(System.Net.HttpStatusCode)</signature>
                        <name>set_Code</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.HttpStatusCode</signature>
                        <name>&lt;Code&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>&lt;OnSetupHeaderFactory&gt;b__19_0</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>&lt;OnSetupMessageFactory&gt;b__20_0</name>
                    </method>
                    <method>
                        <signature>void(System.Type, UTNT.HttpServer.FactoryMethod)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.Type, UTNT.HttpServer.FactoryMethod)</signature>
                        <name>AddDefault</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddDefaultCreators</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>CreateHttpContext</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>CreateRequest</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>CreateResponse</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>CreateResponseGenerator</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>CreateSecureHttpContext</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.FactoryMethod(System.Type)</signature>
                        <name>FindFactoryMethod</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object[])</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpFactory()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnContextDisconnected</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>OnSetupHeaderFactory</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object[])</signature>
                        <name>OnSetupMessageFactory</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpFactory)</signature>
                        <name>set_Current</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IHttpFactory</signature>
                        <name>_current</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderFactory</signature>
                        <name>_headerFactory</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.MessageFactory</signature>
                        <name>_messageFactory</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,UTNT.HttpServer.FactoryMethod&gt;</signature>
                        <name>_methods</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpFile</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OriginalFileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TempFileName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ContentType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OriginalFileName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TempFileName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ContentType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;OriginalFileName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TempFileName&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpFileCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.HttpFile)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpFile(string)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.HttpFile&gt;</signature>
                        <name>_files</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpListener</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.IPAddress, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress, int32, UTNT.HttpServer.HttpFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>add_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;)</signature>
                        <name>add_SocketAccepted</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BeginAccept</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.Sockets.Socket)</signature>
                        <name>CanAcceptSocket</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpListener(System.Net.IPAddress, int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpListener(System.Net.IPAddress, int32, System.Security.Cryptography.X509Certificates.X509Certificate)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpListener(System.Net.IPAddress, int32, UTNT.HttpServer.HttpFactory)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpContext(System.Net.Sockets.Socket)</signature>
                        <name>CreateContext</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpFactory()</signature>
                        <name>get_Factory</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStarted</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.ContinueEventArgs)</signature>
                        <name>On100Continue</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnDisconnect</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>OnRequest</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>OnSocketAccepted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>remove_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;)</signature>
                        <name>remove_SocketAccepted</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>SendErrorPage</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress)</signature>
                        <name>set_Address</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsStarted</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.ILogger)</signature>
                        <name>set_Logger</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Port</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.HttpFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.TcpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_pendingAccepts</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_shutdownEvent</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_shuttingDown</name>
                    </field>
                    <field>
                        <signature>System.Net.IPAddress</signature>
                        <name>&lt;Address&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ContentLengthLimit&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsStarted&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Port&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>ContinueResponseRequested</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;</signature>
                        <name>ErrorPageRequested</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>RequestReceived</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;</signature>
                        <name>SocketAccepted</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.HttpListener/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.SocketFilterEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.ErrorPageEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__6_3</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__7_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.SocketFilterEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__7_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.ErrorPageEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__7_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__7_3</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.HttpListener/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_2</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__6_3</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__7_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;</signature>
                        <name>&lt;&gt;9__7_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;</signature>
                        <name>&lt;&gt;9__7_2</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__7_3</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.IHttpContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Disconnect</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IHttpFactory</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object[])</signature>
                        <name>Get</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IHttpListener</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>add_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;)</signature>
                        <name>add_SocketAccepted</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStarted</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>remove_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.SocketFilterEventArgs&gt;)</signature>
                        <name>remove_SocketAccepted</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.ILogger)</signature>
                        <name>set_Logger</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IMessage</name>
                <methodlist>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.NumericHeader()</signature>
                        <name>get_ContentLength</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeaderCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_Encoding</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.InternalServerException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IParameter</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IParameterCollection</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameter(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IRequest</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.RequestCookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpFileCollection()</signature>
                        <name>get_Files</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_Form</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpVersion</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAjax</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Method</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_Uri</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HttpVersion</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Method</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>set_Uri</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IResponse</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.ResponseCookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpVersion</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Reason</name>
                    </method>
                    <method>
                        <signature>System.Net.HttpStatusCode()</signature>
                        <name>get_Status</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Redirect</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ContentTypeHeader)</signature>
                        <name>set_ContentType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Reason</name>
                    </method>
                    <method>
                        <signature>void(System.Net.HttpStatusCode)</signature>
                        <name>set_Status</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.IServiceResolver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.ConsoleLogFactory</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.ILogFilter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger(System.Type)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogFilter</signature>
                        <name>_filter</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.ConsoleLogger</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, UTNT.HttpServer.Logging.ILogFilter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_LoggingType</name>
                    </method>
                    <method>
                        <signature>System.ConsoleColor(UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>GetColor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_LoggingType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warning</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Warning</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.LogLevel, string)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.LogLevel, string, System.Exception)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogFilter</signature>
                        <name>_filter</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;LoggingType&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.ILogFactory</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger(System.Type)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.ILogFilter</name>
                <methodlist>
                    <method>
                        <signature>bool(UTNT.HttpServer.Logging.LogLevel, System.Type)</signature>
                        <name>CanLog</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.ILogger</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warning</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Warning</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.LogFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.ILogFactory)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger(System.Type)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_isAssigned</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.LogFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>AddNameSpace</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddStandardRules</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>AddType</name>
                    </method>
                    <method>
                        <signature>void(System.Type, UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>AddType</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.HttpServer.Logging.LogLevel, System.Type)</signature>
                        <name>UTNT.HttpServer.Logging.ILogFilter.CanLog</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Logging.LogFilter/NamespaceFilter&gt;</signature>
                        <name>_namespaces</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,UTNT.HttpServer.Logging.LogLevel&gt;</signature>
                        <name>_types</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.LogFilter/NamespaceFilter</name>
                <methodlist>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWildcard</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.LogLevel()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NameSpace</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsWildcard</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Logging.LogLevel)</signature>
                        <name>set_Level</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NameSpace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsWildcard&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>&lt;Level&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NameSpace&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.LogLevel</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Fatal</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Trace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.LogLevel</signature>
                        <name>Warning</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.NullLogFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger(System.Type)</signature>
                        <name>CreateLogger</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogFactory()</signature>
                        <name>get_Instance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.NullLogFactory</signature>
                        <name>_instance</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Logging.NullLogWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warning</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Warning</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.NullLogWriter</signature>
                        <name>Instance</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.ContinueEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.FactoryRequestEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.MessageFactory</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.HeaderFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;)</signature>
                        <name>add_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;)</signature>
                        <name>add_ResponseReceived</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.MessageFactoryContext()</signature>
                        <name>CreateBuilder</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.MessageFactoryContext()</signature>
                        <name>CreateNewContext</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest(string, string, string)</signature>
                        <name>CreateRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse(string, System.Net.HttpStatusCode, string)</signature>
                        <name>CreateResponse</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.FactoryRequestEventArgs)</signature>
                        <name>OnRequest</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs)</signature>
                        <name>OnResponse</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.MessageFactoryContext)</signature>
                        <name>Release</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;)</signature>
                        <name>remove_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;)</signature>
                        <name>remove_ResponseReceived</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Tools.ObjectPool`1&lt;UTNT.HttpServer.Messages.MessageFactoryContext&gt;</signature>
                        <name>_builders</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;</signature>
                        <name>RequestReceived</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;</signature>
                        <name>ResponseReceived</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.MessageFactory/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.FactoryRequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__2_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__2_1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Messages.MessageFactory/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__2_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;</signature>
                        <name>&lt;&gt;9__2_1</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.MessageFactoryContext</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.MessageFactory, UTNT.HttpServer.Headers.HeaderFactory, UTNT.HttpServer.Messages.Parser.HttpParser)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;)</signature>
                        <name>add_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;)</signature>
                        <name>add_RequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;)</signature>
                        <name>add_ResponseCompleted</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.BodyEventArgs)</signature>
                        <name>OnBody</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.HeaderEventArgs)</signature>
                        <name>OnHeader</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnMessageComplete</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.RequestLineEventArgs)</signature>
                        <name>OnRequestLine</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs)</signature>
                        <name>OnResponseLine</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;)</signature>
                        <name>remove_ContinueResponseRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;)</signature>
                        <name>remove_RequestCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;)</signature>
                        <name>remove_ResponseCompleted</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IMessage</signature>
                        <name>_message</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.MessageFactory</signature>
                        <name>_msgFactory</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.HttpParser</signature>
                        <name>_parser</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;</signature>
                        <name>ContinueResponseRequested</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;</signature>
                        <name>RequestCompleted</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;</signature>
                        <name>ResponseCompleted</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.MessageFactoryContext/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.FactoryRequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__5_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__5_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.ContinueEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__5_2</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Messages.MessageFactoryContext/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.FactoryRequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__5_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs&gt;</signature>
                        <name>&lt;&gt;9__5_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.ContinueEventArgs&gt;</signature>
                        <name>&lt;&gt;9__5_2</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.BodyEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AssignInternal</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Buffer</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Offset</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Buffer</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Count</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Offset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;Buffer&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Count&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Offset&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.FactoryResponseEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>set_Response</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IResponse</signature>
                        <name>&lt;Response&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.HeaderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.HttpParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.BodyEventArgs&gt;)</signature>
                        <name>add_BodyBytesReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.HeaderEventArgs&gt;)</signature>
                        <name>add_HeaderParsed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_MessageComplete</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.RequestLineEventArgs&gt;)</signature>
                        <name>add_RequestLineParsed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs&gt;)</signature>
                        <name>add_ResponseLineParsed</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>GetBody</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>GetHeaderName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>GetHeaderValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>OnBodyBytes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnComplete</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>OnFirstLine</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>OnHeader</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ParseFirstLine</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.BodyEventArgs&gt;)</signature>
                        <name>remove_BodyBytesReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.HeaderEventArgs&gt;)</signature>
                        <name>remove_HeaderParsed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_MessageComplete</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.RequestLineEventArgs&gt;)</signature>
                        <name>remove_RequestLineParsed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs&gt;)</signature>
                        <name>remove_ResponseLineParsed</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_bodyBytesLeft</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.BodyEventArgs</signature>
                        <name>_bodyEventArgs</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.HeaderEventArgs</signature>
                        <name>_headerEventArgs</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_headerName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_headerValue</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.HttpParser/ParserMethod</signature>
                        <name>_parserMethod</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.BufferReader</signature>
                        <name>_reader</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.RequestLineEventArgs</signature>
                        <name>_requestEventArgs</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs</signature>
                        <name>_responseEventArgs</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LineNumber&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.BodyEventArgs&gt;</signature>
                        <name>BodyBytesReceived</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.HeaderEventArgs&gt;</signature>
                        <name>HeaderParsed</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>MessageComplete</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.RequestLineEventArgs&gt;</signature>
                        <name>RequestLineParsed</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs&gt;</signature>
                        <name>ResponseLineParsed</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.HttpParser/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.RequestLineEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__11_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__11_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.HeaderEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__11_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.Messages.Parser.BodyEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__11_3</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>&lt;.ctor&gt;b__11_4</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Messages.Parser.HttpParser/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.RequestLineEventArgs&gt;</signature>
                        <name>&lt;&gt;9__11_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs&gt;</signature>
                        <name>&lt;&gt;9__11_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.HeaderEventArgs&gt;</signature>
                        <name>&lt;&gt;9__11_2</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.Messages.Parser.BodyEventArgs&gt;</signature>
                        <name>&lt;&gt;9__11_3</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>&lt;&gt;9__11_4</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.HttpParser/ParserMethod</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>bool(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.ParserException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.RequestEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, System.Net.EndPoint)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Net.EndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>void(System.Net.EndPoint)</signature>
                        <name>set_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.EndPoint</signature>
                        <name>&lt;RemoteEndPoint&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.RequestLineEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Method</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UriPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Method</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UriPath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Version</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Method&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UriPath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Version&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Parser.ResponseLineEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ReasonPhrase</name>
                    </method>
                    <method>
                        <signature>System.Net.HttpStatusCode()</signature>
                        <name>get_StatusCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ReasonPhrase</name>
                    </method>
                    <method>
                        <signature>void(System.Net.HttpStatusCode)</signature>
                        <name>set_StatusCode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Version</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ReasonPhrase&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Net.HttpStatusCode</signature>
                        <name>&lt;StatusCode&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Version&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Request</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.NumericHeader()</signature>
                        <name>get_ContentLength</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.RequestCookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpFileCollection()</signature>
                        <name>get_Files</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_Form</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeaderCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpVersion</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAjax</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Method</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_Parameters</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_Uri</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.Headers.IHeader&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>set_Body</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ConnectionHeader)</signature>
                        <name>set_Connection</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.NumericHeader)</signature>
                        <name>set_ContentLength</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ContentTypeHeader)</signature>
                        <name>set_ContentType</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookieCollection)</signature>
                        <name>set_Cookies</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_Encoding</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.HttpFileCollection)</signature>
                        <name>set_Files</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IParameterCollection)</signature>
                        <name>set_Form</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HttpVersion</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Method</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IParameterCollection)</signature>
                        <name>set_Parameters</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IParameterCollection)</signature>
                        <name>set_QueryString</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>set_Uri</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>UTNT.HttpServer.IRequest.get_Uri</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>UTNT.HttpServer.IRequest.set_Uri</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_bodyFileName</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.NumericHeader</signature>
                        <name>_contentLength</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.RequestCookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IParameterCollection</signature>
                        <name>_form</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>&lt;Body&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader</signature>
                        <name>&lt;ContentType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>&lt;Encoding&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.HttpFileCollection</signature>
                        <name>&lt;Files&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;HttpVersion&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Method&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IParameterCollection</signature>
                        <name>&lt;Parameters&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IParameterCollection</signature>
                        <name>&lt;QueryString&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>&lt;Uri&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.RequestCookie</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.RequestCookieCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookie)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.RequestCookie(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.Messages.RequestCookie&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;UTNT.HttpServer.Messages.RequestCookie&gt;.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,UTNT.HttpServer.Messages.RequestCookie&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.Response</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Net.HttpStatusCode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IRequest)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.IHeader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.HeaderCollection()</signature>
                        <name>CreateHeaderCollection</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Body</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.NumericHeader()</signature>
                        <name>get_ContentLength</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.ResponseCookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeaderCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpVersion</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Headers.IHeader(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Reason</name>
                    </method>
                    <method>
                        <signature>System.Net.HttpStatusCode()</signature>
                        <name>get_Status</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.Headers.IHeader&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Redirect</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ConnectionHeader)</signature>
                        <name>set_Connection</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.NumericHeader)</signature>
                        <name>set_ContentLength</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Headers.ContentTypeHeader)</signature>
                        <name>set_ContentType</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_Encoding</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HttpVersion</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Reason</name>
                    </method>
                    <method>
                        <signature>void(System.Net.HttpStatusCode)</signature>
                        <name>set_Status</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>_body</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ConnectionHeader</signature>
                        <name>_connection</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.NumericHeader</signature>
                        <name>_contentLength</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IHttpContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Messages.ResponseCookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.HeaderCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Headers.ContentTypeHeader</signature>
                        <name>&lt;ContentType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>&lt;Encoding&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;HttpVersion&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Reason&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Net.HttpStatusCode</signature>
                        <name>&lt;Status&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.ResponseCookie</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, System.DateTime)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.DateTime, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookie, System.DateTime)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Expires</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_Expires</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_domain</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>_expires</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NullPath</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.ResponseCookieCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.RequestCookie, System.DateTime)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Messages.ResponseCookie)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Messages.ResponseCookie(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.HttpServer.Messages.ResponseCookie)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.Messages.ResponseCookie&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;UTNT.HttpServer.Messages.ResponseCookie&gt;.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,UTNT.HttpServer.Messages.ResponseCookie&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.ResponseWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_HeadersSent</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_HeadersSent</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, string, System.Text.Encoding)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IResponse)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, System.IO.Stream)</signature>
                        <name>SendBody</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IResponse, System.Exception)</signature>
                        <name>SendErrorPage</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IResponse)</signature>
                        <name>SendHeaders</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>HeadersSent</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Messages.ResponseWriter/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>&lt;.cctor&gt;b__10_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Messages.ResponseWriter/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Method</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddMethod</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_Methods</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsSupported</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_supportedMethods</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Delete</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Head</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Options</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Post</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Put</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Unknown</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Modules.FileModule</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddDefaultMimeTypes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,UTNT.HttpServer.Headers.ContentTypeHeader&gt;()</signature>
                        <name>get_ContentTypes</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.IResourceProvider()</signature>
                        <name>get_Resources</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IResponse, System.IO.Stream)</signature>
                        <name>SendFile</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Headers.ContentTypeHeader&gt;</signature>
                        <name>_contentTypes</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Resources.IResourceProvider</signature>
                        <name>_resourceManager</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Modules.IModule</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.NotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Parameter</name>
                <methodlist>
                    <method>
                        <signature>void(string, string[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_values</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.ParameterCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IParameterCollection[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameter(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetArrayNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.HttpServer.IParameter&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IParameterCollection(string)</signature>
                        <name>GetParameters</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.IParameter&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.ProcessingResult</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.ProcessingResult</signature>
                        <name>Abort</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.ProcessingResult</signature>
                        <name>Continue</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.ProcessingResult</signature>
                        <name>SendResponse</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.RequestContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpContext()</signature>
                        <name>get_HttpContext</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext)</signature>
                        <name>set_HttpContext</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>set_Response</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IHttpContext</signature>
                        <name>&lt;HttpContext&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IResponse</signature>
                        <name>&lt;Response&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.RequestEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IHttpContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsHandled</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.IResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsHandled</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>set_Request</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>set_Response</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.IHttpContext</signature>
                        <name>&lt;Context&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsHandled&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IRequest</signature>
                        <name>&lt;Request&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.IResponse</signature>
                        <name>&lt;Response&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.EmbeddedResourceLoader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly, string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Reflection.Assembly, string)</signature>
                        <name>AddFile</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Reflection.Assembly, string)</signature>
                        <name>AddFilesInFolder</name>
                    </method>
                    <method>
                        <signature>void(string, System.Reflection.Assembly, string)</signature>
                        <name>AddPath</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.EmbeddedResourceLoader/Mapping(string)</signature>
                        <name>FindResourceByWildcard</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadFromPathMappings</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>LoadMappingFromPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Resources.EmbeddedResourceLoader/Mapping&gt;</signature>
                        <name>_mappings</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Resources.EmbeddedResourceLoader/PathMapping&gt;</signature>
                        <name>_pathMappings</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.EmbeddedResourceLoader/Mapping</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly()</signature>
                        <name>get_Assembly</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullResourceName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TypeExtension</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UriPath</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>set_Assembly</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FileName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FullResourceName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TypeExtension</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UriPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>&lt;Assembly&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FileName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FullResourceName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TypeExtension&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UriPath&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.EmbeddedResourceLoader/PathMapping</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly()</signature>
                        <name>get_Assembly</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Resources</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RootNameSpace</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UriPath</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>set_Assembly</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Resources</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RootNameSpace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UriPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.Assembly</signature>
                        <name>&lt;Assembly&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;Resources&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;RootNameSpace&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UriPath&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.FileResources</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Collections.Generic.IEnumerable`1&lt;string&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>FindByWildCard</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>FindFiles</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_ForbiddenCharacters</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFullFilePath</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>set_ForbiddenCharacters</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Resources.FileResources/Mapping&gt;</signature>
                        <name>_mappings</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>_paths</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;ForbiddenCharacters&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>DefaultForbiddenChars</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PathSeparator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.FileResources/Mapping</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AbsolutePath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RelativePath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UriPath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AbsolutePath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RelativePath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UriPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AbsolutePath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;RelativePath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UriPath&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.IResourceLoader</name>
                <methodlist>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.IResourceProvider</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Resources.IResourceLoader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.Resource</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_ModifiedAt</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_ModifiedAt</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>set_Stream</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;ModifiedAt&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>&lt;Stream&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Resources.ResourceProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Resources.IResourceLoader)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;(string)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_isStarted</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Resources.IResourceLoader&gt;</signature>
                        <name>_providers</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Routing.IRouter</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Routing.RegExRouter</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Text.RegularExpressions.RegexOptions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Text.RegularExpressions.RegexOptions, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>_matchUrl</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Routing.SimpleRouter</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FromUrl</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ShouldRedirect</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ToUrl</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_fromUrl</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_shouldRedirect</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_toUrl</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.SecureHttpContext</name>
                <methodlist>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Authentication.SslProtocols, System.Net.Sockets.Socket, UTNT.HttpServer.Messages.MessageFactoryContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(System.Net.Sockets.Socket)</signature>
                        <name>CreateStream</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Transports.ClientCertificate()</signature>
                        <name>get_ClientCertificate</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>System.Security.Authentication.SslProtocols()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseClientCertificate</name>
                    </method>
                    <method>
                        <signature>bool(object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)</signature>
                        <name>OnValidation</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Transports.ClientCertificate)</signature>
                        <name>set_ClientCertificate</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Authentication.SslProtocols)</signature>
                        <name>set_Protocol</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseClientCertificate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate</signature>
                        <name>_certificate</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Transports.ClientCertificate</signature>
                        <name>&lt;ClientCertificate&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Security.Authentication.SslProtocols</signature>
                        <name>&lt;Protocol&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UseClientCertificate&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.SecureHttpListener</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.IPAddress, int32, System.Security.Cryptography.X509Certificates.X509Certificate)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.HttpContext(System.Net.Sockets.Socket)</signature>
                        <name>CreateContext</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>System.Security.Authentication.SslProtocols()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseClientCertificate</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Authentication.SslProtocols)</signature>
                        <name>set_Protocol</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseClientCertificate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate</signature>
                        <name>_certificate</name>
                    </field>
                    <field>
                        <signature>System.Security.Authentication.SslProtocols</signature>
                        <name>&lt;Protocol&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UseClientCertificate&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Server</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.HttpFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.BodyDecoders.IBodyDecoder)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpListener)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Modules.IModule)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Routing.IRouter)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>add_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_PrepareRequest</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>add_SendingResponse</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest)</signature>
                        <name>DecodeBody</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, System.Exception)</signature>
                        <name>DisplayErrorPage</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Authentication.AuthenticationProvider()</signature>
                        <name>get_AuthenticationProvider</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Server()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_MaxContentSize</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ServerName</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>HandleRequest</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.ErrorPageEventArgs)</signature>
                        <name>Listener_OnErrorPage</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.RequestContext)</signature>
                        <name>OnAuthentication</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.RequestContext)</signature>
                        <name>OnBeforeModules</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.RequestContext)</signature>
                        <name>OnBeforeRequest</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>OnRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>ProcessModules</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.HttpServer.ProcessingResult, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>ProcessResult</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>ProcessRouters</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;)</signature>
                        <name>remove_ErrorPageRequested</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_PrepareRequest</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_RequestReceived</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;)</signature>
                        <name>remove_SendingResponse</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RequestAuthentication</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IHttpContext, UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>SendResponse</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Authentication.AuthenticationProvider)</signature>
                        <name>set_AuthenticationProvider</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ContentLengthLimit</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_MaxContentSize</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ServerName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.BodyDecoders.BodyDecoderCollection</signature>
                        <name>_bodyDecoders</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.HttpFactory</signature>
                        <name>_factory</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_isStarted</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.IHttpListener&gt;</signature>
                        <name>_listeners</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Modules.IModule&gt;</signature>
                        <name>_modules</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.HttpServer.Routing.IRouter&gt;</signature>
                        <name>_routers</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Server</signature>
                        <name>_server</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Authentication.AuthenticationProvider</signature>
                        <name>&lt;AuthenticationProvider&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ContentLengthLimit&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;MaxContentSize&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ServerName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;</signature>
                        <name>ErrorPageRequested</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>PrepareRequest</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>RequestReceived</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>SendingResponse</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Server/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__8_0</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__8_1</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__8_2</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.ErrorPageEventArgs)</signature>
                        <name>&lt;.ctor&gt;b__8_3</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Server/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__8_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__8_1</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.RequestEventArgs&gt;</signature>
                        <name>&lt;&gt;9__8_2</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.HttpServer.ErrorPageEventArgs&gt;</signature>
                        <name>&lt;&gt;9__8_3</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Sessions.ISessionProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Sessions.ISessionStore</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Sessions.Session(string)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Sessions.Session)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Touch</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Sessions.Session</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SessionId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SessionId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SessionId&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Sessions.SessionFileStore</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateTempDirectory</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetSessionFileName</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Sessions.Session(string)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnCleanSessions</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Sessions.Session)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Touch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Threading.Timer</signature>
                        <name>_cleanSessionTimer</name>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.Formatters.Binary.BinaryFormatter</signature>
                        <name>_formatter</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_serverName</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_sessionLifetime</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_synclock</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSession</name>
                </genericparameter>
                <name>UTNT.HttpServer.Sessions.SessionProvider`1</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Server)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Server, UTNT.HttpServer.Sessions.ISessionStore)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_SessionLoaded</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse, string)</signature>
                        <name>AddSessionCookie</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_CurrentSession</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SessionLifeTime</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnHeaderSent</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>OnRequest</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_SessionLoaded</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SessionLifeTime</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_cookieName</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_currentSession</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Server</signature>
                        <name>_server</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Sessions.ISessionStore</signature>
                        <name>_store</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;SessionLifeTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>SessionLoaded</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSession</name>
                </genericparameter>
                <name>UTNT.HttpServer.Sessions.SessionProvider`1/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>&lt;.ctor&gt;b__4_0</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>&lt;.ctor&gt;b__5_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Sessions.SessionProvider`1/&lt;&gt;c&lt;!0&gt;</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>&lt;&gt;9__4_0</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>&lt;&gt;9__5_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.SimpleServer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, UTNT.HttpServer.Modules.FileModule)</signature>
                        <name>AddEmbeddedResources</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, UTNT.HttpServer.Modules.FileModule)</signature>
                        <name>AddFileResources</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.SocketFilterEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSocketOk</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Socket</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsSocketOk</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Socket</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsSocketOk&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;Socket&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.BufferReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Text.Encoding)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void(object, int32, int32)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void(char[])</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EOF</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Peek</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RemainingLength</name>
                    </method>
                    <method>
                        <signature>string(int32, int32)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(int32, int32, bool)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadLine</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadQuotedString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadWord</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Length</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>_encoding</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Length&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LineNumber&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.CreateHandler`1</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!0(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.HttpUtility</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlEncode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.ITextReader</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void(object, int32, int32)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void(char[])</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EOF</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Peek</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RemainingLength</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadLine</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadQuotedString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadWord</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.ObjectPool`1</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.HttpServer.Tools.CreateHandler`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>Dequeue</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Enqueue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Tools.CreateHandler`1&lt;!0&gt;</signature>
                        <name>_createMethod</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;!0&gt;</signature>
                        <name>_items</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>T2</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.Properties.Action`2</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!0, !1, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.CachedType</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, UTNT.HttpServer.Tools.Properties.EmitReflector)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ConvertValue</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.CachedType/CachedProperty(string)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>object(object, string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>SetConvertedValue</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>SetValue</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ToBoolean</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ToDate</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.HttpServer.Tools.Properties.CachedType/CachedProperty&gt;</signature>
                        <name>_properties</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.Properties.EmitReflector</signature>
                        <name>_reflectorProvider</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>_type</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,object&gt;</signature>
                        <name>_valueTypeDefaults</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.CachedType/CachedProperty</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo()</signature>
                        <name>get_MemberInfo</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_MemberType</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>set_MemberInfo</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_MemberType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>&lt;MemberInfo&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;MemberType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.Properties.CachedType/ConvertTypeHandler</signature>
                        <name>Convert</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.CachedType/ConvertTypeHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.Type, object, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.EmitHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>BoxIfNeeded</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.Func`2&lt;object,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateFieldGetterHandler</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.Action`2&lt;object,object&gt;(System.Reflection.FieldInfo)</signature>
                        <name>CreateFieldSetterHandler</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.Func`1&lt;object&gt;(System.Type)</signature>
                        <name>CreateParameterlessConstructorHandler</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.Func`2&lt;object,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreatePropertyGetterHandler</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.Action`2&lt;object,object&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>CreatePropertySetterHandler</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>PushInstance</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, System.Type)</signature>
                        <name>UnboxIfNeeded</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.Module</signature>
                        <name>Module</name>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>SingleObject</name>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>TwoObjects</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.EmitReflector</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MemberInfo, object)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>Instantiate</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MemberInfo, object, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TResult</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.Properties.Func`1</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!0(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>T1</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.Properties.Func`2</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(!0, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>!1(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.ICachedType</name>
                <methodlist>
                    <method>
                        <signature>object(object, string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>SetConvertedValue</name>
                    </method>
                    <method>
                        <signature>void(object, string, object)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Properties.PropertyProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Properties.ICachedType(System.Type)</signature>
                        <name>Get</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Tools.Properties.EmitReflector</signature>
                        <name>_emitReflector</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,UTNT.HttpServer.Tools.Properties.CachedType&gt;</signature>
                        <name>_types</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.Session</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_AccessedAt</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Tools.Session()</signature>
                        <name>get_CurrentSession</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SessionId</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_WrittenAt</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_AccessedAt</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Tools.Session)</signature>
                        <name>set_CurrentSession</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SessionId</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_WrittenAt</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TriggerChanged</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.HttpServer.Tools.Session</signature>
                        <name>_currentSession</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;AccessedAt&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SessionId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;WrittenAt&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Tools.SessionChangedHandler</signature>
                        <name>Changed</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.SessionChangedHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(UTNT.HttpServer.Tools.Session, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Tools.Session)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>UTNT.HttpServer.Tools.SessionProvider`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Cache</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CookieName</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SessionExpireSeconds</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SetCookie</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFileName</name>
                    </method>
                    <method>
                        <signature>!0(string)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnCheckExpiredSessions</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>OnLoadSession</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.HttpServer.RequestEventArgs)</signature>
                        <name>OnSendingResponse</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Tools.Session)</signature>
                        <name>OnSessionChanged</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Cache</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CookieName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SessionExpireSeconds</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SetCookie</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.Server)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_cache</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,!0&gt;</signature>
                        <name>_cachedEntries</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_currentSession</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Logging.ILogger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_quit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_sessionExpireSeconds</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_setCookie</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_syncRoot</name>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>_worker</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;CookieName&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.StringReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void(object, int32, int32)</signature>
                        <name>Assign</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void(char[])</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>ConsumeWhiteSpaces</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EOF</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMore</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Peek</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RemainingLength</name>
                    </method>
                    <method>
                        <signature>string(int32, int32)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(int32, int32, bool)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadLine</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadQuotedString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadToEnd</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadUntil</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadWord</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Length</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LineNumber</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Length&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LineNumber&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Tools.UrlParser</name>
                <methodlist>
                    <method>
                        <signature>UTNT.HttpServer.ParameterCollection(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ParameterCollection(UTNT.HttpServer.Tools.ITextReader)</signature>
                        <name>Parse</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.HttpServer.Transports.ClientCertificate</name>
                <methodlist>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate()</signature>
                        <name>get_Certificate</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Chain()</signature>
                        <name>get_Chain</name>
                    </method>
                    <method>
                        <signature>System.Net.Security.SslPolicyErrors()</signature>
                        <name>get_SslPolicyErrors</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Certificate)</signature>
                        <name>set_Certificate</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Chain)</signature>
                        <name>set_Chain</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Security.SslPolicyErrors)</signature>
                        <name>set_SslPolicyErrors</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate</signature>
                        <name>&lt;Certificate&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509Chain</signature>
                        <name>&lt;Chain&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Net.Security.SslPolicyErrors</signature>
                        <name>&lt;SslPolicyErrors&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Transports.ReusableSocketNetworkStream</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, System.IO.FileAccess)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, System.IO.FileAccess, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_isDisposed</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.HttpServer.Utils</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Utils()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternetCacheDir</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_InternetCacheDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalApplicationDataDir</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>mApplicationDataDir</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Utils</signature>
                        <name>mInstance</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mInternetCacheDir</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mLocalApplicationDataDir</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.ByteOrder</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.ByteOrder</signature>
                        <name>Big</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.ByteOrder</signature>
                        <name>Little</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.CloseEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.PayloadData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_Code</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.PayloadData()</signature>
                        <name>get_PayloadData</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Reason</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WasClean</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WasClean</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_clean</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.PayloadData</signature>
                        <name>_payloadData</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.CloseStatusCode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>Abnormal</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>Away</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>InvalidData</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>MandatoryExtension</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>Normal</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>NoStatus</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>PolicyViolation</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>ProtocolError</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>ServerError</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>TlsHandshakeFailure</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>TooBig</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>Undefined</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>UnsupportedData</name>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.CompressionMethod</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.CompressionMethod</signature>
                        <name>Deflate</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CompressionMethod</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.ErrorEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_Exception</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Exception</signature>
                        <name>_exception</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_message</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int16, string)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerResponse, UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerResponse, string)</signature>
                        <name>CloseWithAuthChallenge</name>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream(System.IO.Stream)</signature>
                        <name>compress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>compress</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(System.IO.Stream, UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>Compress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>Compress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>compressToArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>CompressToArray</name>
                    </method>
                    <method>
                        <signature>bool(string, char[])</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,bool&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Specialized.NameValueCollection, string)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Specialized.NameValueCollection, string, string)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(string[])</signature>
                        <name>ContainsTwice</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](!!0[], int32)</signature>
                        <name>Copy</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](!!0[], int64)</signature>
                        <name>Copy</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, int32, System.Action, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>CopyToAsync</name>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream(System.IO.Stream)</signature>
                        <name>decompress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>decompress</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(System.IO.Stream, UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>Decompress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>Decompress</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>decompressToArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>DecompressToArray</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler, object, System.EventArgs)</signature>
                        <name>Emit</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.EventHandler`1&lt;!!0&gt;, object, !!0)</signature>
                        <name>Emit</name>
                    </method>
                    <method>
                        <signature>bool(int32, char, System.Action`1&lt;int32&gt;)</signature>
                        <name>EqualsWith</name>
                    </method>
                    <method>
                        <signature>string(System.Uri)</signature>
                        <name>GetAbsolutePath</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection(System.Collections.Specialized.NameValueCollection, bool)</signature>
                        <name>GetCookies</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>GetDescription</name>
                    </method>
                    <method>
                        <signature>string(System.Uri, bool)</signature>
                        <name>GetDnsSafeHost</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>GetMessage</name>
                    </method>
                    <method>
                        <signature>string(string, char)</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetStatusDescription</name>
                    </method>
                    <method>
                        <signature>string(string, char)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>string(string, char, bool)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int16, UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>InternalToByteArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int64, UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>InternalToByteArray</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int16)</signature>
                        <name>IsCloseStatusCode</name>
                    </method>
                    <method>
                        <signature>bool(string, UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>IsCompressionExtension</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>IsControl</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Opcode)</signature>
                        <name>IsControl</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>IsData</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Opcode)</signature>
                        <name>IsData</name>
                    </method>
                    <method>
                        <signature>bool(string, char)</signature>
                        <name>IsEnclosedIn</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>IsHostOrder</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.IPAddress)</signature>
                        <name>IsLocal</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsPortNumber</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsPredefinedScheme</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int16)</signature>
                        <name>IsReserved</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>IsReserved</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>IsSupported</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsText</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsToken</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.HttpListenerRequest, string)</signature>
                        <name>IsUpgradeTo</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>MaybeUri</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Quote</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, int32)</signature>
                        <name>ReadBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, int64, int32)</signature>
                        <name>ReadBytes</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, System.Action`1&lt;unsigned int8[]&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>ReadBytesAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int64, int32, System.Action`1&lt;unsigned int8[]&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>ReadBytesAsync</name>
                    </method>
                    <method>
                        <signature>string(string, string[])</signature>
                        <name>RemovePrefix</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](!!0[])</signature>
                        <name>Reverse</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;(string, char[])</signature>
                        <name>SplitHeaderValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](!!0[], int32, int32)</signature>
                        <name>SubArray</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](!!0[], int64, int64)</signature>
                        <name>SubArray</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, System.Action)</signature>
                        <name>times</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Action)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Action`1&lt;int32&gt;)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(int64, System.Action)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(int64, System.Action`1&lt;int64&gt;)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, System.Action)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, System.Action`1&lt;unsigned int32&gt;)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, System.Action)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, System.Action`1&lt;unsigned int64&gt;)</signature>
                        <name>Times</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int8[], UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>To</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>unsigned int8[](!!0, UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>ToByteArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ToByteArray</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.CompressionMethod(string)</signature>
                        <name>ToCompressionMethod</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.CompressionMethod, string[])</signature>
                        <name>ToExtensionString</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>ToHostOrder</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress(string)</signature>
                        <name>ToIPAddress</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.List`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>ToList</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>string(!!0[], string)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Net.IPAddress, bool)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>unsigned int16(unsigned int8[], UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>ToUInt16</name>
                    </method>
                    <method>
                        <signature>unsigned int64(unsigned int8[], UTNT.WebSocketSharp.ByteOrder)</signature>
                        <name>ToUInt64</name>
                    </method>
                    <method>
                        <signature>System.Uri(string)</signature>
                        <name>ToUri</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>TrimSlashFromEnd</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>TrimSlashOrBackslashFromEnd</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Uri&amp;, string&amp;)</signature>
                        <name>TryCreateWebSocketUri</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], string&amp;)</signature>
                        <name>TryGetUTF8DecodedString</name>
                    </method>
                    <method>
                        <signature>bool(string, unsigned int8[]&amp;)</signature>
                        <name>TryGetUTF8EncodedBytes</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.FileInfo, System.IO.FileStream&amp;)</signature>
                        <name>TryOpenRead</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Unquote</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlEncode</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>UTF8Decode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>UTF8Encode</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32)</signature>
                        <name>WriteBytes</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32, System.Action, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>WriteBytesAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerResponse, unsigned int8[])</signature>
                        <name>WriteContent</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_last</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_retry</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_tspecials</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass101_0`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;ToString&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0[]</signature>
                        <name>array</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>separator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass17_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;ContainsTwice&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>end</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>len</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,bool&gt;</signature>
                        <name>seek</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>values</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass21_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;CopyToAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>bufferLength</name>
                    </field>
                    <field>
                        <signature>System.AsyncCallback</signature>
                        <name>callback</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>destination</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Exception&gt;</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>source</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass48_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;ReadBytesAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>System.AsyncCallback</signature>
                        <name>callback</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;unsigned int8[]&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Exception&gt;</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>length</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>offset</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>retry</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass49_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>&lt;ReadBytesAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>bufferLength</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;unsigned int8[]&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>dest</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Exception&gt;</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;int64&gt;</signature>
                        <name>read</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>retry</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass49_1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;ReadBytesAsync&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass49_0</signature>
                        <name>CS$&lt;&gt;8__locals1</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>len</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;&gt;c__DisplayClass71_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;WriteBytesAsync&gt;b__0</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>&lt;WriteBytesAsync&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Exception&gt;</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>input</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Ext/&lt;SplitHeaderValue&gt;d__52</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>&lt;&gt;3__separators</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;3__value</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>&lt;buff&gt;5__5</name>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>&lt;c&gt;5__6</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;escaped&gt;5__1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__7</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;len&gt;5__3</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;quoted&gt;5__2</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;seps&gt;5__4</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>separators</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Fin</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Fin</signature>
                        <name>Final</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Fin</signature>
                        <name>More</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.HttpBase</name>
                <methodlist>
                    <method>
                        <signature>void(System.Version, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EntityBody</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream, System.Func`2&lt;string[],!!0&gt;, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, string)</signature>
                        <name>readEntityBody</name>
                    </method>
                    <method>
                        <signature>string[](System.IO.Stream, int32)</signature>
                        <name>readHeaders</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToByteArray</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_headersMaxLength</name>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>_version</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CrLf</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>EntityBodyData</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.HttpBase/&lt;&gt;c__DisplayClass13_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;readHeaders&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;unsigned int8&gt;</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>cnt</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>UTNT.WebSocketSharp.HttpBase/&lt;&gt;c__DisplayClass14_0`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;Read&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>timeout</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.HttpRequest</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Version, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpRequest(System.Uri)</signature>
                        <name>CreateConnectRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpRequest(System.Uri)</signature>
                        <name>CreateWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationResponse()</signature>
                        <name>get_AuthenticationResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RequestUri</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(System.IO.Stream, int32)</signature>
                        <name>GetResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpRequest(string[])</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpRequest(System.IO.Stream, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>SetCookies</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_method</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_uri</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_websocketRequest</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_websocketRequestSet</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.HttpResponse</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, System.Version, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStatusCode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>CreateCloseResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(string)</signature>
                        <name>CreateUnauthorizedResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse()</signature>
                        <name>CreateWebSocketResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasConnectionClose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsProxyAuthenticationRequired</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRedirect</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsUnauthorized</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketResponse</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Reason</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_StatusCode</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(string[])</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(System.IO.Stream, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>SetCookies</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_code</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_reason</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.LogData</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.LogLevel, System.Diagnostics.StackFrame, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.StackFrame()</signature>
                        <name>get_Caller</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Date</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.LogLevel()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Diagnostics.StackFrame</signature>
                        <name>_caller</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>_date</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>_level</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_message</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Logger</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.LogLevel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.LogLevel, string, System.Action`2&lt;UTNT.WebSocketSharp.LogData,string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.LogData, string)</signature>
                        <name>defaultOutput</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_File</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.LogLevel()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>System.Action`2&lt;UTNT.WebSocketSharp.LogData,string&gt;()</signature>
                        <name>get_Output</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.LogLevel)</signature>
                        <name>output</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_File</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.LogLevel)</signature>
                        <name>set_Level</name>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;UTNT.WebSocketSharp.LogData,string&gt;)</signature>
                        <name>set_Output</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>writeToFile</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_file</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_level</name>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;UTNT.WebSocketSharp.LogData,string&gt;</signature>
                        <name>_output</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.LogLevel</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Fatal</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Trace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.LogLevel</signature>
                        <name>Warn</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Mask</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Mask</signature>
                        <name>Off</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Mask</signature>
                        <name>On</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.MessageEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsBinary</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPing</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsText</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Opcode()</signature>
                        <name>get_Opcode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_RawData</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>setData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_data</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_dataSet</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>_opcode</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_rawData</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.AuthenticationBase</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>CreateNonceValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Algorithm</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Nonce</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Opaque</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Qop</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Realm</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes()</signature>
                        <name>get_Scheme</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection(string)</signature>
                        <name>ParseParameters</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToBasicString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToDigestString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>_scheme</name>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>Parameters</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.AuthenticationChallenge</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationChallenge(string)</signature>
                        <name>CreateBasicChallenge</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationChallenge(string)</signature>
                        <name>CreateDigestChallenge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Domain</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Stale</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationChallenge(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToBasicString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToDigestString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.AuthenticationResponse</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationChallenge, UTNT.WebSocketSharp.Net.NetworkCredential, unsigned int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes, System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes, System.Collections.Specialized.NameValueCollection, UTNT.WebSocketSharp.Net.NetworkCredential, unsigned int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.NetworkCredential)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>createA1</name>
                    </method>
                    <method>
                        <signature>string(string, string, string, string, string)</signature>
                        <name>createA1</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>createA2</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>createA2</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.Specialized.NameValueCollection)</signature>
                        <name>CreateRequestDigest</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Cnonce</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Nc</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_NonceCount</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Uri</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>hash</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>initAsDigest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationResponse(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection(string)</signature>
                        <name>ParseBasicCredentials</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToBasicString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToDigestString</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IIdentity()</signature>
                        <name>ToIdentity</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_nonceCount</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.AuthenticationResponse/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;initAsDigest&gt;b__24_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationResponse/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>&lt;&gt;9__24_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.AuthenticationSchemes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>Anonymous</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>Basic</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>Digest</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.Chunk</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ReadLeft</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_data</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_offset</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ChunkedRequestStream</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32, int32, UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginRead</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>int32(System.IAsyncResult)</signature>
                        <name>EndRead</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ChunkStream()</signature>
                        <name>get_Decoder</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>onRead</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.ChunkStream)</signature>
                        <name>set_Decoder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_bufferLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ChunkStream</signature>
                        <name>_decoder</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_disposed</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_noMoreData</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ChunkStream</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[], int32, int32, UTNT.WebSocketSharp.Net.WebHeaderCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebHeaderCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ChunkLeft</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WantMore</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>read</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>removeChunkExtension</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetBuffer</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState(unsigned int8[], int32&amp;, int32)</signature>
                        <name>seekCrLf</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState(unsigned int8[], int32&amp;, int32)</signature>
                        <name>setChunkSize</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState(unsigned int8[], int32&amp;, int32)</signature>
                        <name>setTrailer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>throwProtocolViolation</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32&amp;, int32)</signature>
                        <name>write</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32, int32)</signature>
                        <name>WriteAndReadBack</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState(unsigned int8[], int32&amp;, int32)</signature>
                        <name>writeData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_chunkRead</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.Chunk&gt;</signature>
                        <name>_chunks</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_chunkSize</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_gotIt</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>_saved</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_sawCr</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_trailerState</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ClientSslConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.ClientSslConfiguration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate(object, string, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Cryptography.X509Certificates.X509Certificate, string[])</signature>
                        <name>defaultSelectClientCertificate</name>
                    </method>
                    <method>
                        <signature>bool(object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)</signature>
                        <name>defaultValidateServerCertificate</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CheckCertificateRevocation</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509CertificateCollection()</signature>
                        <name>get_ClientCertificates</name>
                    </method>
                    <method>
                        <signature>System.Net.Security.LocalCertificateSelectionCallback()</signature>
                        <name>get_ClientCertificateSelectionCallback</name>
                    </method>
                    <method>
                        <signature>System.Security.Authentication.SslProtocols()</signature>
                        <name>get_EnabledSslProtocols</name>
                    </method>
                    <method>
                        <signature>System.Net.Security.RemoteCertificateValidationCallback()</signature>
                        <name>get_ServerCertificateValidationCallback</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TargetHost</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CheckCertificateRevocation</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509CertificateCollection)</signature>
                        <name>set_ClientCertificates</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Security.LocalCertificateSelectionCallback)</signature>
                        <name>set_ClientCertificateSelectionCallback</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Authentication.SslProtocols)</signature>
                        <name>set_EnabledSslProtocols</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Security.RemoteCertificateValidationCallback)</signature>
                        <name>set_ServerCertificateValidationCallback</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TargetHost</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_checkCertRevocation</name>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509CertificateCollection</signature>
                        <name>_clientCerts</name>
                    </field>
                    <field>
                        <signature>System.Net.Security.LocalCertificateSelectionCallback</signature>
                        <name>_clientCertSelectionCallback</name>
                    </field>
                    <field>
                        <signature>System.Security.Authentication.SslProtocols</signature>
                        <name>_enabledSslProtocols</name>
                    </field>
                    <field>
                        <signature>System.Net.Security.RemoteCertificateValidationCallback</signature>
                        <name>_serverCertValidationCallback</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_targetHost</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.Cookie</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string, string&amp;)</signature>
                        <name>canSetName</name>
                    </method>
                    <method>
                        <signature>bool(string, string&amp;)</signature>
                        <name>canSetValue</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Comment</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_CommentUri</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Discard</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Domain</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ExactDomain</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Expired</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Expires</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HttpOnly</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxAge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>get_Ports</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Secure</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_TimeStamp</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>int32(int32, int32, int32, int32, int32)</signature>
                        <name>hash</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Comment</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>set_CommentUri</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Discard</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Domain</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ExactDomain</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Expired</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_Expires</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HttpOnly</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Port</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Secure</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Version</name>
                    </method>
                    <method>
                        <signature>string(System.Uri)</signature>
                        <name>ToRequestString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToResponseString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>toResponseStringVersion0</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>toResponseStringVersion1</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(string, int32[]&amp;, string&amp;)</signature>
                        <name>tryCreatePorts</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_comment</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_commentUri</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_discard</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_domain</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>_expires</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_httpOnly</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_port</name>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>_ports</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_reservedCharsForName</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_reservedCharsForValue</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>_timestamp</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_value</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_version</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ExactDomain&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.CookieCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(UTNT.WebSocketSharp.Net.Cookie, UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>compareCookieWithinSort</name>
                    </method>
                    <method>
                        <signature>int32(UTNT.WebSocketSharp.Net.Cookie, UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>compareCookieWithinSorted</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.Cookie(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.Cookie(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;()</signature>
                        <name>get_List</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;()</signature>
                        <name>get_Sorted</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection(string, bool)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection(string)</signature>
                        <name>parseRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection(string)</signature>
                        <name>parseResponse</name>
                    </method>
                    <method>
                        <signature>int32(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>searchCookie</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>SetOrRemove</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>SetOrRemove</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Sort</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>splitCookieHeaderValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;</signature>
                        <name>_list</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.CookieException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>GetObjectData</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>System.Runtime.Serialization.ISerializable.GetObjectData</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.EndPointListener</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, bool, string, UTNT.WebSocketSharp.Net.ServerSslConfiguration, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerPrefix, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>AddPrefix</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix&gt;, UTNT.WebSocketSharp.Net.HttpListenerPrefix)</signature>
                        <name>addSpecial</name>
                    </method>
                    <method>
                        <signature>bool(int32, string)</signature>
                        <name>CertificateExists</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.RSACryptoServiceProvider(string)</signature>
                        <name>createRSAFromFile</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration()</signature>
                        <name>get_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate2(int32, string, System.Security.Cryptography.X509Certificates.X509Certificate2)</signature>
                        <name>getCertificate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>leaveIfNoPrefix</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>onAccept</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, UTNT.WebSocketSharp.Net.EndPointListener)</signature>
                        <name>processAccepted</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpConnection)</signature>
                        <name>RemoveConnection</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerPrefix, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>RemovePrefix</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix&gt;, UTNT.WebSocketSharp.Net.HttpListenerPrefix)</signature>
                        <name>removeSpecial</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener(string, System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix&gt;)</signature>
                        <name>searchHttpListenerFromSpecial</name>
                    </method>
                    <method>
                        <signature>bool(System.Uri, UTNT.WebSocketSharp.Net.HttpListener&amp;)</signature>
                        <name>TrySearchHttpListener</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix&gt;</signature>
                        <name>_all</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_defaultCertFolderPath</name>
                    </field>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>_endpoint</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix,UTNT.WebSocketSharp.Net.HttpListener&gt;</signature>
                        <name>_prefixes</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>_socket</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration</signature>
                        <name>_sslConfig</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerPrefix&gt;</signature>
                        <name>_unhandled</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.Net.HttpConnection,UTNT.WebSocketSharp.Net.HttpConnection&gt;</signature>
                        <name>_unregistered</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_unregisteredSync</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.EndPointManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>AddListener</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>addPrefix</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>AddPrefix</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress(string)</signature>
                        <name>convertToIPAddress</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.IPEndPoint)</signature>
                        <name>RemoveEndPoint</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>RemoveListener</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>removePrefix</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>RemovePrefix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Net.IPEndPoint,UTNT.WebSocketSharp.Net.EndPointListener&gt;</signature>
                        <name>_endpoints</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpBasicIdentity</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_password</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpConnection</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, UTNT.WebSocketSharp.Net.EndPointListener)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BeginReadRequest</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>closeSocket</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>disposeRequestBuffer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>disposeStream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>disposeTimer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsClosed</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalEndPoint</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Reuses</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.RequestStream(int64, bool)</signature>
                        <name>GetRequestStream</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ResponseStream()</signature>
                        <name>GetResponseStream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>onRead</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>onTimeout</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], int32)</signature>
                        <name>processInput</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, int32&amp;)</signature>
                        <name>readLineFrom</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>removeConnection</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SendError</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>SendError</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>unregisterContext</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_bufferLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_contextRegistered</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>_currentLine</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputState</signature>
                        <name>_inputState</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.RequestStream</signature>
                        <name>_inputStream</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener</signature>
                        <name>_lastListener</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.LineState</signature>
                        <name>_lineState</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.EndPointListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ResponseStream</signature>
                        <name>_outputStream</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_position</name>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>_requestBuffer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_reuses</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>_socket</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_timeout</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,bool&gt;</signature>
                        <name>_timeoutCanceled</name>
                    </field>
                    <field>
                        <signature>System.Threading.Timer</signature>
                        <name>_timer</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpDigestIdentity</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Specialized.NameValueCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Algorithm</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Cnonce</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Nc</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Nonce</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Opaque</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Qop</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Realm</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Uri</name>
                    </method>
                    <method>
                        <signature>bool(string, string, string, string)</signature>
                        <name>IsValid</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>_parameters</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpHeaderInfo</name>
                <methodlist>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Net.HttpHeaderType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsMultiValueInRequest</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsMultiValueInResponse</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRequest</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsResponse</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>IsMultiValue</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>IsRestricted</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>_type</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpHeaderType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>MultiValue</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>MultiValueInRequest</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>MultiValueInResponse</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>Request</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>Response</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>Restricted</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>Unspecified</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListener</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Abort</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.HttpConnection)</signature>
                        <name>AddConnection</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginGetContext</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerAsyncResult(UTNT.WebSocketSharp.Net.HttpListenerAsyncResult)</signature>
                        <name>BeginGetContext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckDisposed</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>cleanupConnections</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>cleanupContextQueue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>cleanupContextRegistry</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>cleanupWaitQueue</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext(System.IAsyncResult)</signature>
                        <name>EndGetContext</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes()</signature>
                        <name>get_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;UTNT.WebSocketSharp.Net.HttpListenerRequest,UTNT.WebSocketSharp.Net.AuthenticationSchemes&gt;()</signature>
                        <name>get_AuthenticationSchemeSelector</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CertificateFolderPath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreWriteExceptions</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDisposed</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsListening</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSupported</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerPrefixCollection()</signature>
                        <name>get_Prefixes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Realm</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration()</signature>
                        <name>get_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UnsafeConnectionNtlmAuthentication</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;()</signature>
                        <name>get_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerAsyncResult()</signature>
                        <name>getAsyncResultFromQueue</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext()</signature>
                        <name>GetContext</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext()</signature>
                        <name>getContextFromQueue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetRealm</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;()</signature>
                        <name>GetUserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>RegisterContext</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpConnection)</signature>
                        <name>RemoveConnection</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes(UTNT.WebSocketSharp.Net.HttpListenerRequest)</signature>
                        <name>SelectAuthenticationScheme</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes)</signature>
                        <name>set_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;UTNT.WebSocketSharp.Net.HttpListenerRequest,UTNT.WebSocketSharp.Net.AuthenticationSchemes&gt;)</signature>
                        <name>set_AuthenticationSchemeSelector</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CertificateFolderPath</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreWriteExceptions</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Realm</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.ServerSslConfiguration)</signature>
                        <name>set_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UnsafeConnectionNtlmAuthentication</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;)</signature>
                        <name>set_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>UnregisterContext</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>_authSchemes</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;UTNT.WebSocketSharp.Net.HttpListenerRequest,UTNT.WebSocketSharp.Net.AuthenticationSchemes&gt;</signature>
                        <name>_authSchemeSelector</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_certFolderPath</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.Net.HttpConnection,UTNT.WebSocketSharp.Net.HttpConnection&gt;</signature>
                        <name>_connections</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_connectionsSync</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerContext&gt;</signature>
                        <name>_ctxQueue</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_ctxQueueSync</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.Net.HttpListenerContext,UTNT.WebSocketSharp.Net.HttpListenerContext&gt;</signature>
                        <name>_ctxRegistry</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_ctxRegistrySync</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_defaultRealm</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_disposed</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_ignoreWriteExceptions</name>
                    </field>
                    <field>
                        <signature>bool modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_listening</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerPrefixCollection</signature>
                        <name>_prefixes</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_realm</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_reuseAddress</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration</signature>
                        <name>_sslConfig</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;</signature>
                        <name>_userCredFinder</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;UTNT.WebSocketSharp.Net.HttpListenerAsyncResult&gt;</signature>
                        <name>_waitQueue</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_waitQueueSync</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerAsyncResult</name>
                <methodlist>
                    <method>
                        <signature>void(System.AsyncCallback, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerAsyncResult)</signature>
                        <name>complete</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>Complete</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>Complete</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext, bool)</signature>
                        <name>Complete</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_AsyncState</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle()</signature>
                        <name>get_AsyncWaitHandle</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CompletedSynchronously</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EndCalled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InGet</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCompleted</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext()</signature>
                        <name>GetContext</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EndCalled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InGet</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.AsyncCallback</signature>
                        <name>_callback</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_endCalled</name>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>_exception</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_inGet</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_syncCompleted</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_waitHandle</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerAsyncResult/&lt;&gt;c__DisplayClass25_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;complete&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerAsyncResult</signature>
                        <name>asyncResult</name>
                    </field>
                    <field>
                        <signature>System.AsyncCallback</signature>
                        <name>callback</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerContext</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext(string)</signature>
                        <name>AcceptWebSocket</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpConnection()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorMessage</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ErrorStatus</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasError</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener()</signature>
                        <name>get_Listener</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Register</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ErrorMessage</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ErrorStatus</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>set_Listener</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Unregister</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpConnection</signature>
                        <name>_connection</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_error</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_errorStatus</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerRequest</signature>
                        <name>_request</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse</signature>
                        <name>_response</name>
                    </field>
                    <field>
                        <signature>System.Security.Principal.IPrincipal</signature>
                        <name>_user</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext</signature>
                        <name>_websocketContext</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ErrorCode</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerPrefix</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CheckPrefix</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Host</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener()</signature>
                        <name>get_Listener</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Original</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>parse</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>set_Listener</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_host</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_original</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_port</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_prefix</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerPrefixCollection</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListener)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(string[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_prefixes</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerRequest</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddHeader</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginGetClientCertificate</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate2(System.IAsyncResult)</signature>
                        <name>EndGetClientCertificate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FinishInitialization</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>FlushInput</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_AcceptTypes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ClientCertificateError</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_ContentEncoding</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_ContentLength64</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasEntityBody</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HttpMethod</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_InputStream</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAuthenticated</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLocal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecureConnection</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepAlive</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalEndPoint</name>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RawUrl</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>get_RequestTraceIdentifier</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_Url</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_UrlReferrer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserAgent</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserHostAddress</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserHostName</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_UserLanguages</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate2()</signature>
                        <name>GetClientCertificate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetRequestLine</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Version&amp;)</signature>
                        <name>tryCreateVersion</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_100continue</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>_acceptTypes</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_chunked</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>_contentEncoding</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>_contentLength</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLengthSet</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>System.Guid</signature>
                        <name>_identifier</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_inputStream</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_keepAlive</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_keepAliveSet</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_method</name>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>_queryString</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_referer</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_uri</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_url</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>_userLanguages</name>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>_version</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_websocketRequest</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_websocketRequestSet</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerResponse</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Abort</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>AddHeader</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>AppendCookie</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>AppendHeader</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>canAddOrUpdate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>checkDisposed</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>checkDisposedOrHeadersSent</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerResponse)</signature>
                        <name>CopyFrom</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>findCookie</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CloseConnection</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_ContentEncoding</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_ContentLength64</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HeadersSent</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepAlive</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_OutputStream</name>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RedirectLocation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SendChunked</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_StatusCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_StatusDescription</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Redirect</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CloseConnection</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_ContentEncoding</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_ContentLength64</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ContentType</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>set_Cookies</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebHeaderCollection)</signature>
                        <name>set_Headers</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HeadersSent</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepAlive</name>
                    </method>
                    <method>
                        <signature>void(System.Version)</signature>
                        <name>set_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RedirectLocation</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SendChunked</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_StatusCode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_StatusDescription</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>SetCookie</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection(System.IO.MemoryStream)</signature>
                        <name>WriteHeadersTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_closeConnection</name>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>_contentEncoding</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>_contentLength</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_contentType</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_disposed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_headersSent</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_keepAlive</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_location</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ResponseStream</signature>
                        <name>_outputStream</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_sendChunked</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_statusCode</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_statusDescription</name>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>_version</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerResponse/&lt;&gt;c__DisplayClass69_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;Close&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>output</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpListenerResponse/&lt;findCookie&gt;d__62</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;UTNT.WebSocketSharp.Net.Cookie&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.Cookie()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;UTNT.WebSocketSharp.Net.Cookie&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.Cookie</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.Cookie</signature>
                        <name>&lt;&gt;3__cookie</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;domain&gt;5__2</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;name&gt;5__1</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;path&gt;5__3</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.Cookie</signature>
                        <name>cookie</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpRequestHeader</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Accept</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>AcceptCharset</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>AcceptEncoding</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>AcceptLanguage</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Allow</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Authorization</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>CacheControl</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Connection</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentEncoding</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentLanguage</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentLocation</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentMd5</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentRange</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ContentType</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Cookie</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Expect</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Expires</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>From</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Host</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>IfMatch</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>IfModifiedSince</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>IfNoneMatch</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>IfRange</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>IfUnmodifiedSince</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>KeepAlive</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>LastModified</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>MaxForwards</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Pragma</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>ProxyAuthorization</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Range</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Referer</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>SecWebSocketExtensions</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>SecWebSocketKey</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>SecWebSocketProtocol</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>SecWebSocketVersion</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Te</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Trailer</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>TransferEncoding</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Translate</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Upgrade</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>UserAgent</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Via</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpRequestHeader</signature>
                        <name>Warning</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpResponseHeader</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>AcceptRanges</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Age</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Allow</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>CacheControl</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Connection</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentEncoding</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentLanguage</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentLocation</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentMd5</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentRange</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ContentType</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ETag</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Expires</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>KeepAlive</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>LastModified</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Location</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Pragma</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>ProxyAuthenticate</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>RetryAfter</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>SecWebSocketAccept</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>SecWebSocketExtensions</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>SecWebSocketProtocol</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>SecWebSocketVersion</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Server</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>SetCookie</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Trailer</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>TransferEncoding</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Upgrade</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Vary</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Via</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>Warning</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpResponseHeader</signature>
                        <name>WwwAuthenticate</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpStatusCode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Accepted</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Ambiguous</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>BadGateway</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>BadRequest</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Conflict</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Continue</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Created</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>ExpectationFailed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Forbidden</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Found</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>GatewayTimeout</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Gone</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>HttpVersionNotSupported</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>InternalServerError</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>LengthRequired</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>MethodNotAllowed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Moved</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>MovedPermanently</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>MultipleChoices</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NoContent</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NonAuthoritativeInformation</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NotAcceptable</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NotFound</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NotImplemented</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>NotModified</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>OK</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>PartialContent</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>PaymentRequired</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>PreconditionFailed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>ProxyAuthenticationRequired</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Redirect</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RedirectKeepVerb</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RedirectMethod</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RequestedRangeNotSatisfiable</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RequestEntityTooLarge</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RequestTimeout</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>RequestUriTooLong</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>ResetContent</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>SeeOther</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>ServiceUnavailable</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>SwitchingProtocols</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>TemporaryRedirect</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Unauthorized</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>UnsupportedMediaType</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>Unused</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStatusCode</signature>
                        <name>UseProxy</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpStreamAsyncResult</name>
                <methodlist>
                    <method>
                        <signature>void(System.AsyncCallback, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;Complete&gt;b__35_0</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Complete</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>Complete</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_AsyncState</name>
                    </method>
                    <method>
                        <signature>System.Threading.WaitHandle()</signature>
                        <name>get_AsyncWaitHandle</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Buffer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CompletedSynchronously</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_Exception</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasException</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCompleted</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Offset</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SyncRead</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Buffer</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Count</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Offset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SyncRead</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>System.AsyncCallback</signature>
                        <name>_callback</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_completed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_count</name>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>_exception</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_offset</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_syncRead</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_waitHandle</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpUtility</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Uri(string, string, bool, bool)</signature>
                        <name>CreateRequestUrl</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal(string, UTNT.WebSocketSharp.Net.AuthenticationSchemes, string, string, System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;)</signature>
                        <name>CreateUser</name>
                    </method>
                    <method>
                        <signature>int32(string, int32, int32)</signature>
                        <name>getChar</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>getChar</name>
                    </method>
                    <method>
                        <signature>char[](System.IO.MemoryStream, System.Text.Encoding)</signature>
                        <name>getChars</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding(string)</signature>
                        <name>GetEncoding</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,char&gt;()</signature>
                        <name>getEntities</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8)</signature>
                        <name>getInt</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>HtmlAttributeEncode</name>
                    </method>
                    <method>
                        <signature>void(string, System.IO.TextWriter)</signature>
                        <name>HtmlAttributeEncode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>HtmlDecode</name>
                    </method>
                    <method>
                        <signature>void(string, System.IO.TextWriter)</signature>
                        <name>HtmlDecode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>HtmlEncode</name>
                    </method>
                    <method>
                        <signature>void(string, System.IO.TextWriter)</signature>
                        <name>HtmlEncode</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>initEntities</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection(string, System.Text.Encoding)</signature>
                        <name>InternalParseQueryString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, System.Text.Encoding)</signature>
                        <name>InternalUrlDecode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], int32, int32)</signature>
                        <name>InternalUrlDecodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], int32, int32)</signature>
                        <name>InternalUrlEncodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>InternalUrlEncodeUnicodeToBytes</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>notEncoded</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection(string)</signature>
                        <name>ParseQueryString</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection(string, System.Text.Encoding)</signature>
                        <name>ParseQueryString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>string(string, System.Text.Encoding)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, System.Text.Encoding)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], System.Text.Encoding)</signature>
                        <name>UrlDecode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>UrlDecodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, System.Text.Encoding)</signature>
                        <name>UrlDecodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>UrlDecodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], int32, int32)</signature>
                        <name>UrlDecodeToBytes</name>
                    </method>
                    <method>
                        <signature>void(char, System.IO.Stream, bool)</signature>
                        <name>urlEncode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlEncode</name>
                    </method>
                    <method>
                        <signature>string(string, System.Text.Encoding)</signature>
                        <name>UrlEncode</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>UrlEncode</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32)</signature>
                        <name>UrlEncode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>UrlEncodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, System.Text.Encoding)</signature>
                        <name>UrlEncodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>UrlEncodeToBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], int32, int32)</signature>
                        <name>UrlEncodeToBytes</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlEncodeUnicode</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>UrlEncodeUnicodeToBytes</name>
                    </method>
                    <method>
                        <signature>void(char, System.IO.Stream)</signature>
                        <name>urlPathEncode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UrlPathEncode</name>
                    </method>
                    <method>
                        <signature>void(char, System.Collections.IList, System.Text.Encoding)</signature>
                        <name>writeCharBytes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,char&gt;</signature>
                        <name>_entities</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>_hexChars</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.HttpVersion</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Version</signature>
                        <name>Version10</name>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>Version11</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.InputChunkState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>Data</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>DataEnded</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>End</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputChunkState</signature>
                        <name>Trailer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.InputState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputState</signature>
                        <name>Headers</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.InputState</signature>
                        <name>RequestLine</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.LineState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.LineState</signature>
                        <name>Cr</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.LineState</signature>
                        <name>Lf</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.LineState</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.NetworkCredential</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Domain</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_Roles</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Username</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Domain</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>set_Roles</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Username</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_domain</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>_noRoles</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_password</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>_roles</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_username</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.QueryStringCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ReadBufferState</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[], int32, int32, UTNT.WebSocketSharp.Net.HttpStreamAsyncResult)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpStreamAsyncResult()</signature>
                        <name>get_AsyncResult</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Buffer</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_InitialCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Offset</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStreamAsyncResult)</signature>
                        <name>set_AsyncResult</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Buffer</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Count</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_InitialCount</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Offset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpStreamAsyncResult</signature>
                        <name>_asyncResult</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_count</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_initialCount</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_offset</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.RequestStream</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32, int32, int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginRead</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginWrite</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>int32(System.IAsyncResult)</signature>
                        <name>EndRead</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndWrite</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>fillFromBuffer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRead</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSeek</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Position</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>int64(int64, System.IO.SeekOrigin)</signature>
                        <name>Seek</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Position</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>SetLength</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>_bodyLeft</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_count</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_disposed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_offset</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ResponseStream</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, UTNT.WebSocketSharp.Net.HttpListenerResponse, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginRead</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginWrite</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>int32(System.IAsyncResult)</signature>
                        <name>EndRead</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndWrite</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>flush</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>flushBody</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>flushHeaders</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRead</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSeek</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Position</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int32, bool)</signature>
                        <name>getChunkSizeBytes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>InternalWrite</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>int64(int64, System.IO.SeekOrigin)</signature>
                        <name>Seek</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Position</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>SetLength</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>writeChunked</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>writeChunkedWithoutThrowingException</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>writeWithoutThrowingException</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>_body</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_crlf</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_disposed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse</signature>
                        <name>_response</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_sendChunked</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                    </field>
                    <field>
                        <signature>System.Action`3&lt;unsigned int8[],int32,int32&gt;</signature>
                        <name>_write</name>
                    </field>
                    <field>
                        <signature>System.Action`3&lt;unsigned int8[],int32,int32&gt;</signature>
                        <name>_writeBody</name>
                    </field>
                    <field>
                        <signature>System.Action`3&lt;unsigned int8[],int32,int32&gt;</signature>
                        <name>_writeChunked</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.ServerSslConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Certificate2)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.ServerSslConfiguration)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors)</signature>
                        <name>defaultValidateClientCertificate</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CheckCertificateRevocation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ClientCertificateRequired</name>
                    </method>
                    <method>
                        <signature>System.Net.Security.RemoteCertificateValidationCallback()</signature>
                        <name>get_ClientCertificateValidationCallback</name>
                    </method>
                    <method>
                        <signature>System.Security.Authentication.SslProtocols()</signature>
                        <name>get_EnabledSslProtocols</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate2()</signature>
                        <name>get_ServerCertificate</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CheckCertificateRevocation</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ClientCertificateRequired</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Security.RemoteCertificateValidationCallback)</signature>
                        <name>set_ClientCertificateValidationCallback</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Authentication.SslProtocols)</signature>
                        <name>set_EnabledSslProtocols</name>
                    </method>
                    <method>
                        <signature>void(System.Security.Cryptography.X509Certificates.X509Certificate2)</signature>
                        <name>set_ServerCertificate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_checkCertRevocation</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_clientCertRequired</name>
                    </field>
                    <field>
                        <signature>System.Net.Security.RemoteCertificateValidationCallback</signature>
                        <name>_clientCertValidationCallback</name>
                    </field>
                    <field>
                        <signature>System.Security.Authentication.SslProtocols</signature>
                        <name>_enabledSslProtocols</name>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.X509Certificates.X509Certificate2</signature>
                        <name>_serverCert</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebHeaderCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpHeaderType, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>add</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpRequestHeader, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpResponseHeader, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>addWithoutCheckingName</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>addWithoutCheckingNameAndRestricted</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>AddWithoutValidate</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>checkColonSeparated</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType(string)</signature>
                        <name>checkHeaderType</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>checkName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>checkRestricted</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>checkState</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>checkValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>convert</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.HttpRequestHeader)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.HttpResponseHeader)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;string,string&gt;, string, string, bool)</signature>
                        <name>doWithCheckingState</name>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;string,string&gt;, string, string, bool, bool)</signature>
                        <name>doWithCheckingState</name>
                    </method>
                    <method>
                        <signature>void(System.Action`2&lt;string,string&gt;, string, string)</signature>
                        <name>doWithoutCheckingName</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_AllKeys</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.HttpRequestHeader)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.HttpResponseHeader)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameObjectCollectionBase/KeysCollection()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderInfo(string)</signature>
                        <name>getHeaderInfo</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetKey</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>GetObjectData</name>
                    </method>
                    <method>
                        <signature>string[](int32)</signature>
                        <name>GetValues</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>GetValues</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>InternalRemove</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InternalSet</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>InternalSet</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsHeaderName</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsHeaderValue</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>IsMultiValue</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>isRestricted</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsRestricted</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>IsRestricted</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnDeserialization</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpRequestHeader)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpResponseHeader)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>removeWithoutCheckingName</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Set</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpRequestHeader, string)</signature>
                        <name>Set</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpResponseHeader, string)</signature>
                        <name>Set</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpRequestHeader, string)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpResponseHeader, string)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>setWithoutCheckingName</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>System.Runtime.Serialization.ISerializable.GetObjectData</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToByteArray</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>ToStringMultiValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.WebSocketSharp.Net.HttpHeaderInfo&gt;</signature>
                        <name>_headers</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_internallyUsed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpHeaderType</signature>
                        <name>_state</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebHeaderCollection/&lt;&gt;c__DisplayClass46_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;ToStringMultiValue&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>buff</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>response</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebHeaderCollection/&lt;&gt;c__DisplayClass59_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;GetObjectData&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>cnt</name>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.SerializationInfo</signature>
                        <name>serializationInfo</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebHeaderCollection/&lt;&gt;c__DisplayClass70_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>&lt;ToString&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebHeaderCollection</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>buff</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_CookieCollection</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Host</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAuthenticated</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLocal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecureConnection</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Origin</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_RequestUri</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketKey</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_SecWebSocketProtocols</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketVersion</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_ServerEndPoint</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_UserEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocket()</signature>
                        <name>get_WebSocket</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>_websocket</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext/&lt;get_SecWebSocketProtocols&gt;d__30</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.TcpClient, string, bool, UTNT.WebSocketSharp.Net.ServerSslConfiguration, UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.AuthenticationSchemes, string, System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;)</signature>
                        <name>Authenticate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_CookieCollection</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Host</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAuthenticated</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLocal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecureConnection</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Origin</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_RequestUri</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketKey</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_SecWebSocketProtocols</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketVersion</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_ServerEndPoint</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>get_Stream</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_UserEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocket()</signature>
                        <name>get_WebSocket</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SendAuthenticationChallenge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>_queryString</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.HttpRequest</signature>
                        <name>_request</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.TcpClient</signature>
                        <name>_tcpClient</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_uri</name>
                    </field>
                    <field>
                        <signature>System.Security.Principal.IPrincipal</signature>
                        <name>_user</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>_websocket</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext/&lt;&gt;c__DisplayClass49_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>&lt;Authenticate&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;bool&gt;</signature>
                        <name>auth</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>chal</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;</signature>
                        <name>credentialsFinder</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>realm</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>retry</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>scheme</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext/&lt;get_SecWebSocketProtocols&gt;d__38</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_CookieCollection</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_Headers</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Host</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAuthenticated</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLocal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecureConnection</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWebSocketRequest</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Origin</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_QueryString</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_RequestUri</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketKey</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_SecWebSocketProtocols</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SecWebSocketVersion</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_ServerEndPoint</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_UserEndPoint</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocket()</signature>
                        <name>get_WebSocket</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Opcode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Binary</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Close</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Cont</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Ping</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Pong</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>Text</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.PayloadData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_ApplicationData</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_Code</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_ExtensionData</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_ExtensionDataLength</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasReservedCode</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Reason</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;unsigned int8&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>Mask</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_ExtensionDataLength</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToArray</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>_code</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_codeSet</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_data</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>_extDataLength</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>_length</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_reason</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_reasonSet</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.PayloadData</signature>
                        <name>Empty</name>
                    </field>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>MaxLength</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.PayloadData/&lt;GetEnumerator&gt;d__30</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Byte&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.PayloadData</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Rsv</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Rsv</signature>
                        <name>Off</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Rsv</signature>
                        <name>On</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.HttpRequestEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>createFilePath</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerRequest()</signature>
                        <name>get_Request</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerResponse()</signature>
                        <name>get_Response</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IPrincipal()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>ReadFile</name>
                    </method>
                    <method>
                        <signature>bool(string, unsigned int8[]&amp;)</signature>
                        <name>tryReadFile</name>
                    </method>
                    <method>
                        <signature>bool(string, unsigned int8[]&amp;)</signature>
                        <name>TryReadFile</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_docRootPath</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.HttpServer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress, int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>abort</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnConnect</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnDelete</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnGet</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnHead</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnOptions</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnPatch</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnPost</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnPut</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>add_OnTrace</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Action`1&lt;!!0&gt;)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Func`1&lt;!!0&gt;)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>canSet</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>checkCertificate</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>createFilePath</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener(string, int32, bool)</signature>
                        <name>createListener</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes()</signature>
                        <name>get_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DocumentRootPath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsListening</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepClean</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Realm</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration()</signature>
                        <name>get_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;()</signature>
                        <name>get_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager()</signature>
                        <name>get_WebSocketServices</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>GetFile</name>
                    </method>
                    <method>
                        <signature>void(string, System.Net.IPAddress, int32, bool)</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpListenerContext)</signature>
                        <name>processRequest</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext)</signature>
                        <name>processRequest</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>receiveRequest</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnConnect</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnDelete</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnGet</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnHead</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnOptions</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnPatch</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnPost</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnPut</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;)</signature>
                        <name>remove_OnTrace</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveWebSocketService</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes)</signature>
                        <name>set_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DocumentRootPath</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepClean</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Realm</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;)</signature>
                        <name>set_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>startReceiving</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>stop</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>stopReceiving</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Uri&amp;, string&amp;)</signature>
                        <name>tryCreateUri</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPAddress</signature>
                        <name>_address</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_docRootPath</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_hostname</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_log</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_port</name>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>_receiveThread</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager</signature>
                        <name>_services</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnConnect</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnDelete</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnGet</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnHead</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnOptions</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnPatch</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnPost</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnPut</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.Server.HttpRequestEventArgs&gt;</signature>
                        <name>OnTrace</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.HttpServer/&lt;&gt;c__DisplayClass87_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;receiveRequest&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.HttpServer</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.HttpListenerContext</signature>
                        <name>ctx</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.IWebSocketSession</name>
                <methodlist>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_StartTime</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketState()</signature>
                        <name>get_State</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.ServerState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState</signature>
                        <name>Ready</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState</signature>
                        <name>ShuttingDown</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState</signature>
                        <name>Start</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState</signature>
                        <name>Stop</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketBehavior</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext)</signature>
                        <name>checkHandshakeRequest</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>System.Func`3&lt;UTNT.WebSocketSharp.Net.CookieCollection,UTNT.WebSocketSharp.Net.CookieCollection,bool&gt;()</signature>
                        <name>get_CookiesValidator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EmitOnPing</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ID</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;string,bool&gt;()</signature>
                        <name>get_OriginValidator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager()</signature>
                        <name>get_Sessions</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_StartTime</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.WebSocketSharp.CloseEventArgs)</signature>
                        <name>onClose</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseEventArgs)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.WebSocketSharp.ErrorEventArgs)</signature>
                        <name>onError</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.ErrorEventArgs)</signature>
                        <name>OnError</name>
                    </method>
                    <method>
                        <signature>void(object, UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>onMessage</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>OnMessage</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>onOpen</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnOpen</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(System.Func`3&lt;UTNT.WebSocketSharp.Net.CookieCollection,UTNT.WebSocketSharp.Net.CookieCollection,bool&gt;)</signature>
                        <name>set_CookiesValidator</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EmitOnPing</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;string,bool&gt;)</signature>
                        <name>set_OriginValidator</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Protocol</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext, UTNT.WebSocketSharp.Server.WebSocketSessionManager)</signature>
                        <name>Start</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;UTNT.WebSocketSharp.Net.CookieCollection,UTNT.WebSocketSharp.Net.CookieCollection,bool&gt;</signature>
                        <name>_cookiesValidator</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_emitOnPing</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_id</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_ignoreExtensions</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>_originValidator</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_protocol</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>_sessions</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>_startTime</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>_websocket</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress, int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>abort</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Action`1&lt;!!0&gt;)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Func`1&lt;!!0&gt;)</signature>
                        <name>AddWebSocketService</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>canSet</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>checkHostNameForRequest</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.ServerSslConfiguration, string&amp;)</signature>
                        <name>checkSslConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowForwardedRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes()</signature>
                        <name>get_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsListening</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepClean</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Realm</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration()</signature>
                        <name>get_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;()</signature>
                        <name>get_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager()</signature>
                        <name>get_WebSocketServices</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>getRealm</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration()</signature>
                        <name>getSslConfiguration</name>
                    </method>
                    <method>
                        <signature>void(string, System.Net.IPAddress, int32, bool)</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext)</signature>
                        <name>processRequest</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>receiveRequest</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveWebSocketService</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowForwardedRequest</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.AuthenticationSchemes)</signature>
                        <name>set_AuthenticationSchemes</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepClean</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Realm</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReuseAddress</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;)</signature>
                        <name>set_UserCredentialsFinder</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.ServerSslConfiguration)</signature>
                        <name>start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>startReceiving</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>stop</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>stopReceiving</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Uri&amp;, string&amp;)</signature>
                        <name>tryCreateUri</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPAddress</signature>
                        <name>_address</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_allowForwardedRequest</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationSchemes</signature>
                        <name>_authSchemes</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_defaultRealm</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_dnsStyle</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_hostname</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.TcpListener</signature>
                        <name>_listener</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_log</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_port</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_realm</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_realmInUse</name>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>_receiveThread</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_reuseAddress</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager</signature>
                        <name>_services</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration</signature>
                        <name>_sslConfig</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ServerSslConfiguration</signature>
                        <name>_sslConfigInUse</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Security.Principal.IIdentity,UTNT.WebSocketSharp.Net.NetworkCredential&gt;</signature>
                        <name>_userCredFinder</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServer/&lt;&gt;c__DisplayClass70_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;receiveRequest&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServer</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.TcpClient</signature>
                        <name>cl</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceHost</name>
                <methodlist>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketBehavior()</signature>
                        <name>CreateSession</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_BehaviorType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepClean</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager()</signature>
                        <name>get_Sessions</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.ServerState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepClean</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext)</signature>
                        <name>StartSession</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_log</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_path</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>_sessions</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBehavior</name>
                </genericparameter>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceHost`1</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Func`1&lt;!0&gt;, System.Action`1&lt;!0&gt;, UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Func`1&lt;!0&gt;, UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Func`1&lt;!0&gt;(System.Func`1&lt;!0&gt;, System.Action`1&lt;!0&gt;)</signature>
                        <name>createCreator</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketBehavior()</signature>
                        <name>CreateSession</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_BehaviorType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;!0&gt;</signature>
                        <name>_creator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBehavior</name>
                </genericparameter>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceHost`1/&lt;&gt;c__DisplayClass5_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;createCreator&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;!0&gt;</signature>
                        <name>creator</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;!0&gt;</signature>
                        <name>initializer</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceManager</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Func`1&lt;!!0&gt;)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, System.Action`1&lt;!!0&gt;)</signature>
                        <name>AddService</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Action)</signature>
                        <name>broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Action)</signature>
                        <name>broadcast</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Action)</signature>
                        <name>broadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Action)</signature>
                        <name>broadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Collections.Generic.Dictionary`2&lt;string,bool&gt;&gt;(unsigned int8[], System.TimeSpan)</signature>
                        <name>broadping</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Collections.Generic.Dictionary`2&lt;string,bool&gt;&gt;()</signature>
                        <name>Broadping</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Collections.Generic.Dictionary`2&lt;string,bool&gt;&gt;(string)</signature>
                        <name>Broadping</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>canSet</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UTNT.WebSocketSharp.Server.WebSocketServiceHost&gt;()</signature>
                        <name>get_Hosts</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceHost(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepClean</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_Paths</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SessionCount</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>bool(string, UTNT.WebSocketSharp.Server.WebSocketServiceHost&amp;)</signature>
                        <name>InternalTryGetServiceHost</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveService</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepClean</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>bool(string, UTNT.WebSocketSharp.Server.WebSocketServiceHost&amp;)</signature>
                        <name>TryGetServiceHost</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_clean</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.WebSocketSharp.Server.WebSocketServiceHost&gt;</signature>
                        <name>_hosts</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_log</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>_waitTime</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TBehavior</name>
                </genericparameter>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceManager/&lt;&gt;c__33`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;AddService&gt;b__33_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager/&lt;&gt;c__33`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;9__33_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceManager/&lt;&gt;c__DisplayClass25_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;broadcastAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>opcode</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketServiceManager/&lt;&gt;c__DisplayClass26_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;broadcastAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServiceManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>opcode</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketSessionManager</name>
                <methodlist>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.Timers.ElapsedEventArgs)</signature>
                        <name>&lt;setSweepTimer&gt;b__37_0</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.Server.IWebSocketSession)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Action)</signature>
                        <name>broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Action)</signature>
                        <name>broadcast</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32)</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.CompressionMethod,System.IO.Stream&gt;)</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.CompressionMethod,unsigned int8[]&gt;)</signature>
                        <name>Broadcast</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Action)</signature>
                        <name>broadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Action)</signature>
                        <name>broadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Action)</signature>
                        <name>BroadcastAsync</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;(unsigned int8[])</signature>
                        <name>broadping</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;()</signature>
                        <name>Broadping</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;(string)</signature>
                        <name>Broadping</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,bool&gt;(unsigned int8[], System.TimeSpan)</signature>
                        <name>Broadping</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>canSet</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CloseSession</name>
                    </method>
                    <method>
                        <signature>void(string, unsigned int16, string)</signature>
                        <name>CloseSession</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>CloseSession</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>createID</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_ActiveIDs</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_IDs</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;string&gt;()</signature>
                        <name>get_InactiveIDs</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.IWebSocketSession(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeepClean</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UTNT.WebSocketSharp.Server.IWebSocketSession&gt;()</signature>
                        <name>get_Sessions</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Server.ServerState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>PingTo</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>PingTo</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>SendTo</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, string)</signature>
                        <name>SendTo</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], string)</signature>
                        <name>SendTo</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendToAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, string, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendToAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], string, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendToAsync</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeepClean</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>setSweepTimer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.PayloadData, bool)</signature>
                        <name>stop</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Sweep</name>
                    </method>
                    <method>
                        <signature>bool(string, UTNT.WebSocketSharp.Server.IWebSocketSession&amp;)</signature>
                        <name>tryGetSession</name>
                    </method>
                    <method>
                        <signature>bool(string, UTNT.WebSocketSharp.Server.IWebSocketSession&amp;)</signature>
                        <name>TryGetSession</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_clean</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_forSweep</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger</signature>
                        <name>_log</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,UTNT.WebSocketSharp.Server.IWebSocketSession&gt;</signature>
                        <name>_sessions</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.ServerState modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_state</name>
                    </field>
                    <field>
                        <signature>bool modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_sweeping</name>
                    </field>
                    <field>
                        <signature>System.Timers.Timer</signature>
                        <name>_sweepTimer</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_sync</name>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>_waitTime</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketSessionManager/&lt;&gt;c__DisplayClass32_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;broadcastAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>opcode</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketSessionManager/&lt;&gt;c__DisplayClass33_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;broadcastAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>opcode</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketSessionManager/&lt;get_ActiveIDs&gt;d__13</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2/Enumerator&lt;string,bool&gt;</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Server.WebSocketSessionManager/&lt;get_InactiveIDs&gt;d__19</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;string&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.String&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.String&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketSessionManager</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2/Enumerator&lt;string,bool&gt;</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.Utils</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Utils()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InternetCacheDir</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ApplicationDataDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_InternetCacheDir</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalApplicationDataDir</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>mApplicationDataDir</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Utils</signature>
                        <name>mInstance</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mInternetCacheDir</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mLocalApplicationDataDir</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string, string[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;open&gt;b__149_0</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;processSecWebSocketProtocolHeader&gt;b__160_0</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>&lt;startReceiving&gt;b__176_2</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>accept</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Accept</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AcceptAsync</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>acceptHandshake</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.CloseEventArgs&gt;)</signature>
                        <name>add_OnClose</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.ErrorEventArgs&gt;)</signature>
                        <name>add_OnError</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.MessageEventArgs&gt;)</signature>
                        <name>add_OnMessage</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_OnOpen</name>
                    </method>
                    <method>
                        <signature>bool(string&amp;)</signature>
                        <name>canSet</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext, string&amp;)</signature>
                        <name>checkHandshakeRequest</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.HttpResponse, string&amp;)</signature>
                        <name>checkHandshakeResponse</name>
                    </method>
                    <method>
                        <signature>bool(bool, bool, bool, bool, bool, bool, string&amp;)</signature>
                        <name>checkIfAvailable</name>
                    </method>
                    <method>
                        <signature>bool(bool, bool, bool, bool, string&amp;)</signature>
                        <name>checkIfAvailable</name>
                    </method>
                    <method>
                        <signature>bool(string, string, string&amp;)</signature>
                        <name>checkParametersForSetCredentials</name>
                    </method>
                    <method>
                        <signature>bool(string, string, string, string&amp;)</signature>
                        <name>checkParametersForSetProxy</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>checkProtocols</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame, string&amp;)</signature>
                        <name>checkReceivedFrame</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.PayloadData, bool, bool, bool)</signature>
                        <name>close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.HttpResponse)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.PayloadData, unsigned int8[])</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>closeAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.PayloadData, bool, bool, bool)</signature>
                        <name>closeAsync</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>CloseAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, string)</signature>
                        <name>CloseAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>CloseAsync</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>CloseAsync</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], bool, bool)</signature>
                        <name>closeHandshake</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.PayloadData, bool, bool, bool)</signature>
                        <name>closeHandshake</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>connect</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Connect</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ConnectAsync</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>CreateBase64Key</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>createExtensions</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(UTNT.WebSocketSharp.Net.HttpStatusCode)</signature>
                        <name>createHandshakeFailureResponse</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpRequest()</signature>
                        <name>createHandshakeRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse()</signature>
                        <name>createHandshakeResponse</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>CreateResponseKey</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext, string&amp;)</signature>
                        <name>customCheckHandshakeRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.MessageEventArgs()</signature>
                        <name>dequeueFromMessageEventQueue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>doHandshake</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>enqueueToMessageEventQueue</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>fatal</name>
                    </method>
                    <method>
                        <signature>void(string, unsigned int16)</signature>
                        <name>fatal</name>
                    </method>
                    <method>
                        <signature>void(string, UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>fatal</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.CompressionMethod()</signature>
                        <name>get_Compression</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection()</signature>
                        <name>get_CookieCollection</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;()</signature>
                        <name>get_Cookies</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.NetworkCredential()</signature>
                        <name>get_Credentials</name>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext,string&gt;()</signature>
                        <name>get_CustomHandshakeRequestChecker</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EmitOnPing</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnableRedirection</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Extensions</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMessage</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAlive</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnected</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSecure</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Logger()</signature>
                        <name>get_Log</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Origin</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketState()</signature>
                        <name>get_ReadyState</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.ClientSslConfiguration()</signature>
                        <name>get_SslConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Uri()</signature>
                        <name>get_Url</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_WaitTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InternalAccept</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>message</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>messagec</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>messages</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>open</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[])</signature>
                        <name>ping</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Ping</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Ping</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], System.TimeSpan)</signature>
                        <name>Ping</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processCloseFrame</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.CookieCollection)</signature>
                        <name>processCookies</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processDataFrame</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processFragmentFrame</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processPingFrame</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processPongFrame</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processReceivedFrame</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>processSecWebSocketExtensionsClientHeader</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>processSecWebSocketExtensionsServerHeader</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;string&gt;)</signature>
                        <name>processSecWebSocketProtocolHeader</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>processUnsupportedFrame</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>releaseClientResources</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>releaseCommonResources</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>releaseResources</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>releaseServerResources</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.CloseEventArgs&gt;)</signature>
                        <name>remove_OnClose</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.ErrorEventArgs&gt;)</signature>
                        <name>remove_OnError</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;UTNT.WebSocketSharp.MessageEventArgs&gt;)</signature>
                        <name>remove_OnMessage</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_OnOpen</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Fin, UTNT.WebSocketSharp.Opcode, unsigned int8[], bool)</signature>
                        <name>send</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Opcode, System.IO.Stream)</signature>
                        <name>send</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.Opcode, System.IO.Stream, bool)</signature>
                        <name>send</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.CompressionMethod,System.IO.Stream&gt;)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, unsigned int8[], System.Collections.Generic.Dictionary`2&lt;UTNT.WebSocketSharp.CompressionMethod,unsigned int8[]&gt;)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, System.IO.Stream, System.Action`1&lt;bool&gt;)</signature>
                        <name>sendAsync</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Action`1&lt;bool&gt;)</signature>
                        <name>SendAsync</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[])</signature>
                        <name>sendBytes</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse()</signature>
                        <name>sendHandshakeRequest</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.HttpResponse(UTNT.WebSocketSharp.HttpRequest, int32)</signature>
                        <name>sendHttpRequest</name>
                    </method>
                    <method>
                        <signature>bool(UTNT.WebSocketSharp.HttpResponse)</signature>
                        <name>sendHttpResponse</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>sendProxyConnectRequest</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CompressionMethod)</signature>
                        <name>set_Compression</name>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext,string&gt;)</signature>
                        <name>set_CustomHandshakeRequestChecker</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EmitOnPing</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnableRedirection</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Logger)</signature>
                        <name>set_Log</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Origin</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Protocol</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_WaitTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>setClientStream</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Net.Cookie)</signature>
                        <name>SetCookie</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>SetCredentials</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>SetProxy</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>startReceiving</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketAcceptHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketExtensionsClientHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketExtensionsServerHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketKeyHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketProtocolClientHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketProtocolServerHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketVersionClientHeader</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>validateSecWebSocketVersionServerHeader</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.AuthenticationChallenge</signature>
                        <name>_authChallenge</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_base64Key</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_client</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>_closeContext</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.CompressionMethod</signature>
                        <name>_compression</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext</signature>
                        <name>_context</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.CookieCollection</signature>
                        <name>_cookies</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.NetworkCredential</signature>
                        <name>_credentials</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_emitOnPing</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_enableRedirection</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_extensions</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_extensionsRequested</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_forMessageEventQueue</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_forPing</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_forSend</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_forState</name>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>_fragmentsBuffer</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_fragmentsCompressed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>_fragmentsOpcode</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_guid</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;UTNT.WebSocketSharp.Net.WebSockets.WebSocketContext,string&gt;</signature>
                        <name>_handshakeRequestChecker</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_ignoreExtensions</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_inContinuation</name>
                    </field>
                    <field>
                        <signature>bool modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_inMessage</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Logger modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_logger</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_maxRetryCountForConnect</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.MessageEventArgs&gt;</signature>
                        <name>_message</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;UTNT.WebSocketSharp.MessageEventArgs&gt;</signature>
                        <name>_messageEventQueue</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_nonceCount</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_origin</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_pongReceived</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_preAuth</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_protocol</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>_protocols</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_protocolsRequested</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.NetworkCredential</signature>
                        <name>_proxyCredentials</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_proxyUri</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketState modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>_readyState</name>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>_receivingExited</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_retryCountForConnect</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_secure</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.ClientSslConfiguration</signature>
                        <name>_sslConfig</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.TcpClient</signature>
                        <name>_tcpClient</name>
                    </field>
                    <field>
                        <signature>System.Uri</signature>
                        <name>_uri</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_version</name>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>_waitTime</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>EmptyBytes</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FragmentLength</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.CloseEventArgs&gt;</signature>
                        <name>OnClose</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.ErrorEventArgs&gt;</signature>
                        <name>OnError</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;UTNT.WebSocketSharp.MessageEventArgs&gt;</signature>
                        <name>OnMessage</name>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>OnOpen</name>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.RandomNumberGenerator</signature>
                        <name>RandomNumber</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;checkProtocols&gt;b__124_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>&lt;&gt;9__124_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass129_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;closeAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`4&lt;UTNT.WebSocketSharp.PayloadData,bool,bool,bool&gt;</signature>
                        <name>closer</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass148_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;messages&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.MessageEventArgs</signature>
                        <name>e</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass169_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;sendAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;bool&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;UTNT.WebSocketSharp.Opcode,System.IO.Stream,bool&gt;</signature>
                        <name>sender</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass176_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;startReceiving&gt;b__0</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>&lt;startReceiving&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>&lt;&gt;9__1</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>receive</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass179_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;validateSecWebSocketExtensionsServerHeader&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>method</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass182_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;validateSecWebSocketProtocolServerHeader&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass195_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;AcceptAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;bool&gt;</signature>
                        <name>acceptor</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;&gt;c__DisplayClass207_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>&lt;ConnectAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;bool&gt;</signature>
                        <name>connector</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocket/&lt;get_Cookies&gt;d__70</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally2</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UTNT.WebSocketSharp.Net.Cookie&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;UTNT.WebSocketSharp.Net.Cookie&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Net.Cookie()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;UTNT.WebSocketSharp.Net.Cookie&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Net.Cookie</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocket</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseStatusCode, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode()</signature>
                        <name>get_Code</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.CloseStatusCode</signature>
                        <name>_code</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Fin, UTNT.WebSocketSharp.Opcode, unsigned int8[], bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Fin, UTNT.WebSocketSharp.Opcode, UTNT.WebSocketSharp.PayloadData, bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.Opcode, UTNT.WebSocketSharp.PayloadData, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(UTNT.WebSocketSharp.PayloadData, bool)</signature>
                        <name>CreateCloseFrame</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>createMaskingKey</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(bool)</signature>
                        <name>CreatePingFrame</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(unsigned int8[], bool)</signature>
                        <name>CreatePingFrame</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(UTNT.WebSocketSharp.PayloadData, bool)</signature>
                        <name>CreatePongFrame</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>dump</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_ExtendedPayloadLength</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ExtendedPayloadLengthCount</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Fin()</signature>
                        <name>get_Fin</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>get_FullPayloadLength</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsBinary</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsClose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCompressed</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsContinuation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsControl</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsData</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFinal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFragment</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsMasked</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPing</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPong</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsText</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Mask()</signature>
                        <name>get_Mask</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_MaskingKey</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Opcode()</signature>
                        <name>get_Opcode</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.PayloadData()</signature>
                        <name>get_PayloadData</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>get_PayloadLength</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Rsv()</signature>
                        <name>get_Rsv1</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Rsv()</signature>
                        <name>get_Rsv2</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.Rsv()</signature>
                        <name>get_Rsv3</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;unsigned int8&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>string(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>print</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Print</name>
                    </method>
                    <method>
                        <signature>string(bool)</signature>
                        <name>PrintToString</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(unsigned int8[])</signature>
                        <name>processHeader</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>readExtendedPayloadLength</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame, System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>readExtendedPayloadLengthAsync</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(System.IO.Stream, bool)</signature>
                        <name>ReadFrame</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, bool, System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>ReadFrameAsync</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(System.IO.Stream)</signature>
                        <name>readHeader</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>readHeaderAsync</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>readMaskingKey</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame, System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>readMaskingKeyAsync</name>
                    </method>
                    <method>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>readPayloadData</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, UTNT.WebSocketSharp.WebSocketFrame, System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;, System.Action`1&lt;System.Exception&gt;)</signature>
                        <name>readPayloadDataAsync</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToArray</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Unmask</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_extPayloadLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Fin</signature>
                        <name>_fin</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Mask</signature>
                        <name>_mask</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_maskingKey</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Opcode</signature>
                        <name>_opcode</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.PayloadData</signature>
                        <name>_payloadData</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>_payloadLength</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Rsv</signature>
                        <name>_rsv1</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Rsv</signature>
                        <name>_rsv2</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Rsv</signature>
                        <name>_rsv3</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>EmptyPingBytes</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass67_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Action`4&lt;string,string,string,string&gt;()</signature>
                        <name>&lt;dump&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>lineFmt</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>output</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass67_1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string)</signature>
                        <name>&lt;dump&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass67_0</signature>
                        <name>CS$&lt;&gt;8__locals1</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>lineCnt</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass71_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>&lt;readExtendedPayloadLengthAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame</signature>
                        <name>frame</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>len</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass73_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>&lt;readHeaderAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>completed</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass75_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>&lt;readMaskingKeyAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame</signature>
                        <name>frame</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>len</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass77_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>&lt;readPayloadDataAsync&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame</signature>
                        <name>frame</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>llen</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;&gt;c__DisplayClass83_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>&lt;ReadFrameAsync&gt;b__0</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>&lt;ReadFrameAsync&gt;b__1</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>&lt;ReadFrameAsync&gt;b__2</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.WebSocketFrame)</signature>
                        <name>&lt;ReadFrameAsync&gt;b__3</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>&lt;&gt;9__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>&lt;&gt;9__2</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>&lt;&gt;9__3</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UTNT.WebSocketSharp.WebSocketFrame&gt;</signature>
                        <name>completed</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Exception&gt;</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>stream</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>unmask</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketFrame/&lt;GetEnumerator&gt;d__85</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Byte&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketFrame</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;&gt;7__wrap1</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>UTNT.WebSocketSharp.WebSocketState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketState</signature>
                        <name>Closed</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketState</signature>
                        <name>Closing</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketState</signature>
                        <name>Connecting</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.WebSocketState</signature>
                        <name>Open</name>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.ArgsParser.Argument</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, bool, bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, string, string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Regex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetGroupName</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Regex</name>
                    </method>
                    <method>
                        <signature>bool(string, string&amp;)</signature>
                        <name>SetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Description</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LongName</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>mRegex</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mRegexStr</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Multiply</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Optional</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Parsed</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ShotName</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Switched</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>SwitchedDefault</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>Value</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;object&gt;</signature>
                        <name>Values</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.ArgsParser.ArgumentParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.ArgsParser.Argument&gt;()</signature>
                        <name>get_Arguments</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Usage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.ArgsParser.Argument&gt;</signature>
                        <name>mArguments</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.ArgsParser.ArgumentParser/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Parse&gt;b__3_2</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Parse&gt;b__3_3</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Usage&gt;b__4_0</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Usage&gt;b__4_1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.ArgsParser.ArgumentParser/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,bool&gt;</signature>
                        <name>&lt;&gt;9__3_2</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,string&gt;</signature>
                        <name>&lt;&gt;9__3_3</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,bool&gt;</signature>
                        <name>&lt;&gt;9__4_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,bool&gt;</signature>
                        <name>&lt;&gt;9__4_1</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.ArgsParser.ArgumentParser/&lt;&gt;c__DisplayClass3_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Parse&gt;b__0</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.ArgsParser.Argument)</signature>
                        <name>&lt;Parse&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,bool&gt;</signature>
                        <name>&lt;&gt;9__0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.ArgsParser.Argument,bool&gt;</signature>
                        <name>&lt;&gt;9__1</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.Connect</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64, string, string)</signature>
                        <name>_send</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.MessageModel, string, string, Wing.Tools.Terminal.Inline)</signature>
                        <name>CallClient</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.CloseEventArgs)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(UTNT.WebSocketSharp.MessageEventArgs)</signature>
                        <name>OnMessage</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnOpen</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SendData</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.MessageModel, string)</signature>
                        <name>SendImage</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.MessageModel, string, Wing.Tools.Terminal.Inline)</signature>
                        <name>SendText</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Terminal.Connect/&lt;&gt;c__DisplayClass0_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;OnMessage&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>args</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Terminal.Connect/&lt;&gt;c__DisplayClass0_1</signature>
                        <name>CS$&lt;&gt;8__locals2</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>msg</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.Connect/&lt;&gt;c__DisplayClass0_1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Terminal.Connect/&lt;&gt;c__DisplayClass0_2</signature>
                        <name>CS$&lt;&gt;8__locals1</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>id</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Terminal.IWorker</signature>
                        <name>worker</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.Connect/&lt;&gt;c__DisplayClass0_2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Terminal.Connect</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Terminal.MessageModel</signature>
                        <name>requst</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.HelpWorker</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Description</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Terminal.Connect, Wing.Tools.Terminal.MessageModel, string[])</signature>
                        <name>Do</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.Connect)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Usage</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Terminal.Inline</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>background</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>bold</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>code</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>color</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>italic</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>link</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>script</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>strike</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>underline</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.IWorker</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>Description</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Terminal.Connect, Wing.Tools.Terminal.MessageModel, string[])</signature>
                        <name>Do</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.Connect)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Usage</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Terminal.ManWorker</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Description</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Terminal.Connect, Wing.Tools.Terminal.MessageModel, string[])</signature>
                        <name>Do</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.Connect)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Usage</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Terminal.MessageModel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>cmd</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>content</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>id</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Terminal.Inline</signature>
                        <name>inline</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>type</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.PlayerPrefsWorker</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>_doAdd</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>_doDelete</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>_doGet</name>
                    </method>
                    <method>
                        <signature>bool(string[], string&amp;)</signature>
                        <name>_doQuery</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Description</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Terminal.Connect, Wing.Tools.Terminal.MessageModel, string[])</signature>
                        <name>Do</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.Connect)</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Usage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.ArgsParser.ArgumentParser</signature>
                        <name>mParser</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.PlayerPrefsWorker/Args</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Delete</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Get</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Has</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Key</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Set</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.ArgsParser.Argument</signature>
                        <name>Value</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Terminal.UTerminal</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.Connect)</signature>
                        <name>&lt;init&gt;b__11_0</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Wing.Tools.Terminal.IWorker&gt;()</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Terminal.IWorker(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Terminal.UTerminal()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsListening</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Terminal.IWorker)</signature>
                        <name>Regist</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RegistDefaultWork</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreExtensions</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>UnRegist</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>mIgnoreExtensions</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>mPort</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Wing.Tools.Terminal.IWorker&gt;</signature>
                        <name>mWorks</name>
                    </field>
                    <field>
                        <signature>UTNT.WebSocketSharp.Server.WebSocketServer</signature>
                        <name>mWSsv</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Terminal.UTerminal</signature>
                        <name>sInstance</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Broadcast</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Utils.Broadcast()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>GetBroadcast</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StopTick</name>
                    </method>
                    <method>
                        <signature>void(string, float32)</signature>
                        <name>tick</name>
                    </method>
                    <method>
                        <signature>void(string, float32)</signature>
                        <name>Tick</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>iep</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>mTick</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Broadcast</signature>
                        <name>sInstance</name>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>socket</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Broadcast/&lt;&gt;c__DisplayClass12_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;tick&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.Broadcast</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>float32</signature>
                        <name>interval</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>msg</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.CoroutineProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>add_OnUpdate</name>
                    </method>
                    <method>
                        <signature>void(float32, System.Action)</signature>
                        <name>Delay</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(System.Action, float32)</signature>
                        <name>DoDelay</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>DoInMainThread</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Utils.CoroutineProvider()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>remove_OnUpdate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Action&gt;</signature>
                        <name>_actions</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.CoroutineProvider</signature>
                        <name>m_instance</name>
                    </field>
                    <field>
                        <signature>UnityEngine.GameObject</signature>
                        <name>obj</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>OnUpdate</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.CoroutineProvider/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>&lt;Update&gt;b__11_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.CoroutineProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;System.Action&gt;</signature>
                        <name>&lt;&gt;9__11_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.CoroutineProvider/&lt;DoDelay&gt;d__12</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>action</name>
                    </field>
                    <field>
                        <signature>float32</signature>
                        <name>delay</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.EDirType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.EDirType</signature>
                        <name>DataPath</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EDirType</signature>
                        <name>PersistentDataPath</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EDirType</signature>
                        <name>StreamingAssetsPath</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EDirType</signature>
                        <name>TemporaryCachePath</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.EPlatform</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.EPlatform</signature>
                        <name>Android</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EPlatform</signature>
                        <name>iOS</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EPlatform</signature>
                        <name>Mac</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EPlatform</signature>
                        <name>Windows</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Ext</name>
                <methodlist>
                    <method>
                        <signature>string(UnityEngine.Color32)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Utils.LoadAsset</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DeInit</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;UnityEngine.WWW&gt;()</signature>
                        <name>LoadWWW</name>
                    </method>
                    <method>
                        <signature>UnityEngine.WWW()</signature>
                        <name>StarLoad</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_iCountRetry</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_sPath</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>m_www</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.LoadAsset/&lt;LoadWWW&gt;d__5</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;UnityEngine.WWW&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;UnityEngine.WWW&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>UnityEngine.WWW()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;UnityEngine.WWW&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.LoadAsset</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Loom</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>_update</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Awake</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Utils.Loom()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initial</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnDisable</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>QueueOnMainThread</name>
                    </method>
                    <method>
                        <signature>void(System.Action, float32)</signature>
                        <name>QueueOnMainThread</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>RunAction</name>
                    </method>
                    <method>
                        <signature>System.Threading.Thread(System.Action)</signature>
                        <name>RunAsync</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Action&gt;</signature>
                        <name>_actions</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_count</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Loom</signature>
                        <name>_current</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Action&gt;</signature>
                        <name>_currentActions</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.Utils.Loom/DelayedQueueItem&gt;</signature>
                        <name>_currentDelayed</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.Utils.Loom/DelayedQueueItem&gt;</signature>
                        <name>_delayed</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_started</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>initialized</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>maxThreads</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>numThreads</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Loom/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.Utils.Loom/DelayedQueueItem)</signature>
                        <name>&lt;_update&gt;b__22_0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.Loom/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Wing.Tools.Utils.Loom/DelayedQueueItem,bool&gt;</signature>
                        <name>&lt;&gt;9__22_0</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Loom/DelayedQueueItem</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Action</signature>
                        <name>action</name>
                    </field>
                    <field>
                        <signature>float32</signature>
                        <name>time</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.ResLoad</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Utils.ResLoad()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>UnityEngine.WWW(string)</signature>
                        <name>StarLoad</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.ResLoad</signature>
                        <name>instance</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, string, System.Action`1&lt;bool&gt;)</signature>
                        <name>_copyTo</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, System.Action`1&lt;UnityEngine.AssetBundle&gt;)</signature>
                        <name>_loadAssetBundle</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, System.Action`1&lt;UnityEngine.WWW&gt;)</signature>
                        <name>_loadAssetBundle</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Action`1&lt;bool&gt;)</signature>
                        <name>CopyFileTo</name>
                    </method>
                    <method>
                        <signature>UnityEngine.Texture2D(UnityEngine.RenderTexture, System.Nullable`1&lt;UnityEngine.Rect&gt;)</signature>
                        <name>CreateTexture2DFromRT</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_StreamAssetsPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_WWWStreamAssetsPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetDataPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetExtentAssetsPath</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFileHash</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.Utils.EPlatform()</signature>
                        <name>GetPlatform</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetResourcePath</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>GetUTCMilliseconds</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, System.Action`1&lt;UnityEngine.WWW&gt;)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, System.Action`2&lt;UnityEngine.WWW,object&gt;, object)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;UnityEngine.AssetBundle&gt;)</signature>
                        <name>LoadAssetBundle</name>
                    </method>
                    <method>
                        <signature>UnityEngine.Texture2D(string)</signature>
                        <name>LoadPNGFromDisk</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, System.Action`1&lt;UnityEngine.Texture2D&gt;)</signature>
                        <name>LoadTexture</name>
                    </method>
                    <method>
                        <signature>bool(UnityEngine.RenderTexture, string)</signature>
                        <name>SaveRenderTextureToPNG</name>
                    </method>
                    <method>
                        <signature>bool(UnityEngine.Texture, UnityEngine.Material, string)</signature>
                        <name>SaveRenderTextureToPNG</name>
                    </method>
                    <method>
                        <signature>void(UnityEngine.Texture2D, string, bool)</signature>
                        <name>SaveTextureFile</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>StringMD5</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;UnityEngine.WWW&gt;)</signature>
                        <name>WWWLoad</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DataPath</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PersistentDataPath</name>
                    </field>
                    <field>
                        <signature>UnityEngine.RuntimePlatform</signature>
                        <name>Platform</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>StreamingAssetsPath</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TemporaryCachePath</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;_copyTo&gt;d__15</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;bool&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>dst</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>src</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;_loadAssetBundle&gt;d__21</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UnityEngine.WWW&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>url</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;_loadAssetBundle&gt;d__22</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UnityEngine.AssetBundle&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>url</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;Load&gt;d__17</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UnityEngine.WWW&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>url</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;Load&gt;d__18</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;UnityEngine.WWW,object&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>url</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.UtilsHelper/&lt;LoadTexture&gt;d__16</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>UnityEngine.WWW</signature>
                        <name>&lt;www&gt;5__1</name>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;UnityEngine.Texture2D&gt;</signature>
                        <name>cb</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>url</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/ZipEventHandler)</signature>
                        <name>add_Finished</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/PostEventHandler)</signature>
                        <name>add_PostEvent</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/PostFilterEventHandler)</signature>
                        <name>add_PostFilterEvent</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/ZipProgressEventHandler)</signature>
                        <name>add_Progress</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>AsyncUnzip</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string, string, string)</signature>
                        <name>AsyncUnzipFile</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(unsigned int8[], System.Collections.Generic.Dictionary`2&lt;string,unsigned int8[]&gt;, string)</signature>
                        <name>AsyncUnzipFileToMemory</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Collections.Generic.Dictionary`2&lt;string,unsigned int8[]&gt;, string)</signature>
                        <name>AsyncUnzipToMemary</name>
                    </method>
                    <method>
                        <signature>void(string[], string, string, string)</signature>
                        <name>AsyncZip</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator(string[], string, string, string)</signature>
                        <name>AsyncZipFiles</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Processing</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>OnFinished</name>
                    </method>
                    <method>
                        <signature>void(ICSharpCode.SharpZipLib.Zip.ZipEntry)</signature>
                        <name>OnPost</name>
                    </method>
                    <method>
                        <signature>bool(ICSharpCode.SharpZipLib.Zip.ZipEntry)</signature>
                        <name>OnPostFilter</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>OnProgress</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/ZipEventHandler)</signature>
                        <name>remove_Finished</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/PostEventHandler)</signature>
                        <name>remove_PostEvent</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/PostFilterEventHandler)</signature>
                        <name>remove_PostFilterEvent</name>
                    </method>
                    <method>
                        <signature>void(Wing.Tools.Utils.Zipper/ZipProgressEventHandler)</signature>
                        <name>remove_Progress</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;Wing.Tools.Utils.Zipper/ZipItem&gt;)</signature>
                        <name>SearchFiles</name>
                    </method>
                    <method>
                        <signature>void(string[], System.Collections.Generic.List`1&lt;Wing.Tools.Utils.Zipper/ZipItem&gt;)</signature>
                        <name>SearchFiles</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>UnzipFile</name>
                    </method>
                    <method>
                        <signature>void(string[], string, string, string)</signature>
                        <name>Zip</name>
                    </method>
                    <method>
                        <signature>bool(string, string, ICSharpCode.SharpZipLib.Zip.ZipOutputStream)</signature>
                        <name>ZipFile</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper/ZipEventHandler</signature>
                        <name>Finished</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>mProcessing</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper/PostEventHandler</signature>
                        <name>PostEvent</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper/PostFilterEventHandler</signature>
                        <name>PostFilterEvent</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper/ZipProgressEventHandler</signature>
                        <name>Progress</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>Tag</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/&lt;AsyncUnzipFile&gt;d__34</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally2</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_filePathName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_outputPath</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_password</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;bytes&gt;5__2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;count&gt;5__6</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;countSize&gt;5__5</name>
                    </field>
                    <field>
                        <signature>ICSharpCode.SharpZipLib.Zip.ZipEntry</signature>
                        <name>&lt;entry&gt;5__8</name>
                    </field>
                    <field>
                        <signature>System.IO.FileStream</signature>
                        <name>&lt;fileStream&gt;5__7</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;readLen&gt;5__3</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;total&gt;5__4</name>
                    </field>
                    <field>
                        <signature>ICSharpCode.SharpZipLib.Zip.ZipInputStream</signature>
                        <name>&lt;zipInputStream&gt;5__1</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/&lt;AsyncUnzipFileToMemory&gt;d__33</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally2</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,unsigned int8[]&gt;</signature>
                        <name>_memory</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_password</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;bytes&gt;5__2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;count&gt;5__6</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;countSize&gt;5__5</name>
                    </field>
                    <field>
                        <signature>ICSharpCode.SharpZipLib.Zip.ZipEntry</signature>
                        <name>&lt;entry&gt;5__8</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;readLen&gt;5__3</name>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>&lt;stream&gt;5__7</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;total&gt;5__4</name>
                    </field>
                    <field>
                        <signature>ICSharpCode.SharpZipLib.Zip.ZipInputStream</signature>
                        <name>&lt;zipInputStream&gt;5__1</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>data</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/&lt;AsyncZipFiles&gt;d__29</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_outputPathName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_password</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>float32</signature>
                        <name>&lt;counter&gt;5__3</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__4</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.Utils.Zipper/ZipItem&gt;</signature>
                        <name>&lt;items&gt;5__1</name>
                    </field>
                    <field>
                        <signature>ICSharpCode.SharpZipLib.Zip.ZipOutputStream</signature>
                        <name>&lt;zipOutputStream&gt;5__2</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>baseDir</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>dirOrFiles</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/PostEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(ICSharpCode.SharpZipLib.Zip.ZipEntry, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(ICSharpCode.SharpZipLib.Zip.ZipEntry)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/PostFilterEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(ICSharpCode.SharpZipLib.Zip.ZipEntry, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>bool(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>bool(ICSharpCode.SharpZipLib.Zip.ZipEntry)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/ZipEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(bool, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/ZipItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Filename</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.Utils.Zipper/ZipProgressEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(float32, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.WebServer.DirInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>childnum</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.WebServer.DirInfo&gt;</signature>
                        <name>children</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.EDirType</signature>
                        <name>dirtype</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>editable</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filetype</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isdir</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>modifytime</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>renameable</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>size</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.DirInfoList</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.WebServer.DirInfo&gt;</signature>
                        <name>children</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.HandleRouter</name>
                <methodlist>
                    <method>
                        <signature>void(string, Wing.Tools.WebServer.HandleRouter/Handler)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FromUrl</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.ProcessingResult(UTNT.HttpServer.RequestContext)</signature>
                        <name>Process</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_fromUrl</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_shouldRedirect</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.WebServer.HandleRouter/Handler</signature>
                        <name>mHandler</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.HandleRouter/Handler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.WebServer.Info</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>error</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.Log</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Trace</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warning</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Warning</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.WebServer.LogFactory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Logging.ILogger(System.Type)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Wing.Tools.WebServer.RootInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.WebServer.DirInfo&gt;</signature>
                        <name>children</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>platform</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.TerminalInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>defaultInput</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>enable</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>maxRow</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>port</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.UintyStreamAssetsLoader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Collections.Generic.IEnumerable`1&lt;string&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>FindByWildCard</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>FindFiles</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Resources.Resource(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_ForbiddenCharacters</name>
                    </method>
                    <method>
                        <signature>string(string, bool&amp;)</signature>
                        <name>GetFullFilePath</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>set_ForbiddenCharacters</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Wing.Tools.WebServer.UintyStreamAssetsLoader/Mapping&gt;</signature>
                        <name>_mappings</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>_paths</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;ForbiddenCharacters&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>DefaultForbiddenChars</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PathSeparator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.UintyStreamAssetsLoader/Mapping</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AbsolutePath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Custom</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RelativePath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UriPath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AbsolutePath</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Custom</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RelativePath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UriPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AbsolutePath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Custom&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;RelativePath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UriPath&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WebServer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddEditableFileExtion</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>addFileHandler</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>addFoldHandler</name>
                    </method>
                    <method>
                        <signature>bool(Wing.Tools.Utils.EDirType)</signature>
                        <name>canEdit</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>deleteHandler</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DisableTerminal</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse)</signature>
                        <name>enableCrossDomain</name>
                    </method>
                    <method>
                        <signature>void(int32, string, int32)</signature>
                        <name>EnableTerminal</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnableCrossDomain</name>
                    </method>
                    <method>
                        <signature>UTNT.HttpServer.Server()</signature>
                        <name>get_Server</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Utils.EDirType)</signature>
                        <name>getDir</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>getDirHandler</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.WebServer.DirInfo(Wing.Tools.Utils.EDirType, string)</signature>
                        <name>getDirInfo</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>getFileHandler</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.WebServer.DirInfo(Wing.Tools.Utils.EDirType, string)</signature>
                        <name>getFileInfo</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>getFileType</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.WebServer.DirInfo(Wing.Tools.Utils.EDirType, string)</signature>
                        <name>getInfo</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>getPlatformHandler</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>getRootDirHandler</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.WebServer.RootInfo()</signature>
                        <name>getRootInfo</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>getTerminalInfoHandler</name>
                    </method>
                    <method>
                        <signature>string(Wing.Tools.Utils.EDirType)</signature>
                        <name>getTypeResDir</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>init</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>renameHandler</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>repaceFileHandler</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse, object)</signature>
                        <name>sendData</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IResponse, string)</signature>
                        <name>sendString</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnableCrossDomain</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>setContentHandler</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>UnescapeDataString</name>
                    </method>
                    <method>
                        <signature>void(UTNT.HttpServer.IRequest, UTNT.HttpServer.IResponse)</signature>
                        <name>unzipHandler</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>mEdiableExt</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>mEnableCrossDomain</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>mInitialed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>mMaxTerimalRow</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>mRunning</name>
                    </field>
                    <field>
                        <signature>UTNT.HttpServer.Server</signature>
                        <name>mServer</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>mTerminalDefaultInput</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>psw</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WebServer/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Start&gt;b__16_1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.WebServer.WebServer/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>&lt;&gt;9__16_1</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WebServer/&lt;&gt;c__DisplayClass16_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Start&gt;b__0</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.WebServer.WebServer</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>port</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WWWCache</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>AddCustomData</name>
                    </method>
                    <method>
                        <signature>string(string, unsigned int8[])</signature>
                        <name>AddCustomData</name>
                    </method>
                    <method>
                        <signature>Wing.Tools.WebServer.WWWCache()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>GetCustomItem</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>getCustomKey</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>GetItem</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action, System.Action, string)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveCustomData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CustomPath</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Wing.Tools.WebServer.WWWCache/Item&gt;</signature>
                        <name>mCustomItems</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,unsigned int8[]&gt;</signature>
                        <name>mItems</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.WebServer.WWWCache</signature>
                        <name>sInstance</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WWWCache/&lt;&gt;c__DisplayClass8_0</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(UnityEngine.WWW)</signature>
                        <name>&lt;Load&gt;b__0</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>&lt;Load&gt;b__1</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Wing.Tools.WebServer.WWWCache</signature>
                        <name>&lt;&gt;4__this</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper/ZipEventHandler</signature>
                        <name>&lt;&gt;9__1</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>done</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>error</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>psw</name>
                    </field>
                    <field>
                        <signature>Wing.Tools.Utils.Zipper</signature>
                        <name>zipper</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Wing.Tools.WebServer.WWWCache/Item</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>data</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>key</name>
                    </field>
                </fieldlist>
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>352</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>3095</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>1432</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00%</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>